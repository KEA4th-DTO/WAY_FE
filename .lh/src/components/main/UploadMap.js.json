{
    "sourceFile": "src/components/main/UploadMap.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1716202545614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716202636408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,12 +84,12 @@\n                 zIndex: 999,\n             });\n \n \n-            // 게시글 마커 표시\n-            post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n-                createMarker(item, index);\n-            });\n+            // // 게시글 마커 표시\n+            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n+            //     createMarker(item, index);\n+            // });\n \n             // 지도의 확대/축소 및 중심 좌표 상태 변경\n             naver.maps.Event.addListener(map, 'zoom_changed', () => {\n                 setMapState({\n"
                },
                {
                    "date": 1716203490671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,11 @@\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n const UploadMap = () => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [post, setPost] = useState([]);\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const clickedMarkers = {}; // 클릭된 마커를 저장할 객체\n \n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n@@ -83,9 +81,20 @@\n                 },\n                 zIndex: 999,\n             });\n \n-\n+            //현재 위치 dailyPin 마커 표시\n+            new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+            \n             // // 게시글 마커 표시\n             // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n             //     createMarker(item, index);\n             // });\n"
                },
                {
                    "date": 1716203512077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n const UploadMap = () => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [post, setPost] = useState([]);\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n \n@@ -80,9 +81,9 @@\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n                 zIndex: 999,\n             });\n-\n+            \n             //현재 위치 dailyPin 마커 표시\n             new naver.maps.Marker({\n                 position: location,\n                 map,\n@@ -92,9 +93,9 @@\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n                 zIndex: 998,\n             });\n-            \n+\n             // // 게시글 마커 표시\n             // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n             //     createMarker(item, index);\n             // });\n"
                },
                {
                    "date": 1716203535654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,33 +69,34 @@\n             // Immediately update bounds when map is initialized\n             updateBounds();\n \n             naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-\n-            //현재 위치 마커표시\n+            \n+            //현재 위치 dailyPin 마커 표시\n             new naver.maps.Marker({\n                 position: location,\n                 map,\n                 icon: {\n-                    url: currentPin,\n+                    url: dailyPin,\n                     size: new naver.maps.Size(28, 28),\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n-                zIndex: 999,\n+                zIndex: 998,\n             });\n-            \n-            //현재 위치 dailyPin 마커 표시\n+            //현재 위치 마커표시\n             new naver.maps.Marker({\n                 position: location,\n                 map,\n                 icon: {\n-                    url: dailyPin,\n+                    url: currentPin,\n                     size: new naver.maps.Size(28, 28),\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n-                zIndex: 998,\n+                zIndex: 999,\n             });\n \n+            \n+\n             // // 게시글 마커 표시\n             // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n             //     createMarker(item, index);\n             // });\n"
                },
                {
                    "date": 1716203546965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = () => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [post, setPost] = useState([]);\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+            \n+            //현재 위치 마커표시\n+            new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: currentPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 999,\n+            });\n+\n+            \n+\n+            // // 게시글 마커 표시\n+            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n+            //     createMarker(item, index);\n+            // });\n+\n+            // 지도의 확대/축소 및 중심 좌표 상태 변경\n+            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    zoom: map.getZoom(),\n+                });\n+            });\n+\n+            naver.maps.Event.addListener(map, 'center_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    center: map.getCenter(),\n+                });\n+            });\n+\n+            \n+        }\n+    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+        <div>\n+                <button onClick={onRefreshClick} >\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+                </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716203561621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,22 +82,9 @@\n                 },\n                 zIndex: 998,\n             });\n             \n-            //현재 위치 마커표시\n-            new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: currentPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 999,\n-            });\n \n-            \n-\n             // // 게시글 마커 표시\n             // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n             //     createMarker(item, index);\n             // });\n@@ -149,155 +136,4 @@\n     );\n };\n \n export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = () => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [post, setPost] = useState([]);\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-            //현재 위치 마커표시\n-            new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: currentPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 999,\n-            });\n-\n-            \n-\n-            // // 게시글 마커 표시\n-            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n-            //     createMarker(item, index);\n-            // });\n-\n-            // 지도의 확대/축소 및 중심 좌표 상태 변경\n-            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    zoom: map.getZoom(),\n-                });\n-            });\n-\n-            naver.maps.Event.addListener(map, 'center_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    center: map.getCenter(),\n-                });\n-            });\n-\n-            \n-        }\n-    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-        <div>\n-                <button onClick={onRefreshClick} >\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-                </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n"
                },
                {
                    "date": 1716203587450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = () => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [post, setPost] = useState([]);\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(30, 30),\n+                    scaledSize: new naver.maps.Size(30, 30),\n+                },\n+                zIndex: 998,\n+            });\n+            \n+\n+            // // 게시글 마커 표시\n+            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n+            //     createMarker(item, index);\n+            // });\n+\n+            // 지도의 확대/축소 및 중심 좌표 상태 변경\n+            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    zoom: map.getZoom(),\n+                });\n+            });\n+\n+            naver.maps.Event.addListener(map, 'center_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    center: map.getCenter(),\n+                });\n+            });\n+\n+            \n+        }\n+    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+        <div>\n+                <button onClick={onRefreshClick} >\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+                </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716203596060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,143 +135,4 @@\n     );\n };\n \n export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = () => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [post, setPost] = useState([]);\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-            \n-\n-            // // 게시글 마커 표시\n-            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n-            //     createMarker(item, index);\n-            // });\n-\n-            // 지도의 확대/축소 및 중심 좌표 상태 변경\n-            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    zoom: map.getZoom(),\n-                });\n-            });\n-\n-            naver.maps.Event.addListener(map, 'center_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    center: map.getCenter(),\n-                });\n-            });\n-\n-            \n-        }\n-    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-        <div>\n-                <button onClick={onRefreshClick} >\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-                </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n"
                },
                {
                    "date": 1716203737639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = () => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [post, setPost] = useState([]);\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+            });\n+            \n+            // 지도의 확대/축소 및 중심 좌표 상태 변경\n+            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    zoom: map.getZoom(),\n+                });\n+            });\n+\n+            naver.maps.Event.addListener(map, 'center_changed', () => {\n+                setMapState({\n+                    ...mapState,\n+                    center: map.getCenter(),\n+                });\n+            });\n+\n+            \n+        }\n+    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+        <div>\n+                <button onClick={onRefreshClick} >\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+                </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716203812160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,162 +85,24 @@\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n             });\n-            \n-            // 지도의 확대/축소 및 중심 좌표 상태 변경\n-            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    zoom: map.getZoom(),\n-                });\n-            });\n \n-            naver.maps.Event.addListener(map, 'center_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    center: map.getCenter(),\n-                });\n-            });\n+            // // 지도의 확대/축소 및 중심 좌표 상태 변경\n+            // naver.maps.Event.addListener(map, 'zoom_changed', () => {\n+            //     setMapState({\n+            //         ...mapState,\n+            //         zoom: map.getZoom(),\n+            //     });\n+            // });\n \n-            \n-        }\n-    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-        <div>\n-                <button onClick={onRefreshClick} >\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-                </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = () => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [post, setPost] = useState([]);\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(30, 30),\n-                    scaledSize: new naver.maps.Size(30, 30),\n-                },\n-                zIndex: 998,\n-            });\n-            \n-\n-            // // 게시글 마커 표시\n-            // post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n-            //     createMarker(item, index);\n+            // naver.maps.Event.addListener(map, 'center_changed', () => {\n+            //     setMapState({\n+            //         ...mapState,\n+            //         center: map.getCenter(),\n+            //     });\n             // });\n \n-            // 지도의 확대/축소 및 중심 좌표 상태 변경\n-            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    zoom: map.getZoom(),\n-                });\n-            });\n-\n-            naver.maps.Event.addListener(map, 'center_changed', () => {\n-                setMapState({\n-                    ...mapState,\n-                    center: map.getCenter(),\n-                });\n-            });\n-\n             \n         }\n     }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n \n"
                },
                {
                    "date": 1716204088869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n const UploadMap = () => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [post, setPost] = useState([]);\n+    const [postPosition, setPostPosition] = useState([]);\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n \n@@ -80,32 +80,18 @@\n                     size: new naver.maps.Size(28, 28),\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n                 zIndex: 998,\n-            });\n+            },\n+        );\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n+                setPostPosition([e.coord.getLat(), e.coord.getLng()]);\n             });\n-\n-            // // 지도의 확대/축소 및 중심 좌표 상태 변경\n-            // naver.maps.Event.addListener(map, 'zoom_changed', () => {\n-            //     setMapState({\n-            //         ...mapState,\n-            //         zoom: map.getZoom(),\n-            //     });\n-            // });\n-\n-            // naver.maps.Event.addListener(map, 'center_changed', () => {\n-            //     setMapState({\n-            //         ...mapState,\n-            //         center: map.getCenter(),\n-            //     });\n-            // });\n-\n-            \n+            console.log(postPosition);\n         }\n-    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n+    }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n \n     useEffect(() => {\n         // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n         if (currentMyLocation && mapRef.current) {\n"
                },
                {
                    "date": 1716204123003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         );\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n-                setPostPosition([e.coord.getLat(), e.coord.getLng()]);\n+                setPostPosition(e.coord);\n             });\n             console.log(postPosition);\n         }\n     }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n"
                },
                {
                    "date": 1716204160902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n                 setPostPosition(e.coord);\n             });\n-            console.log(postPosition);\n+            console.log(\"postPosition:\", postPosition);\n         }\n     }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n \n     useEffect(() => {\n"
                },
                {
                    "date": 1716204186883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,10 +86,11 @@\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n                 setPostPosition(e.coord);\n+                console.log(\"postPosition:\", postPosition);\n             });\n-            console.log(\"postPosition:\", postPosition);\n+            \n         }\n     }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n \n     useEffect(() => {\n"
                },
                {
                    "date": 1716204207601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,8 @@\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n                 setPostPosition(e.coord);\n-                console.log(\"postPosition:\", postPosition);\n             });\n             \n         }\n     }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n"
                },
                {
                    "date": 1716205253855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = () => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [postPosition, setPostPosition] = useState([]);\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            },\n+        );\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord);\n+            });\n+            \n+        }\n+    }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+\n+        <div>\n+                <button onClick={onRefreshClick} >\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+                </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716206098652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,10 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = () => {\n+const UploadMap = ({ setPostPosition }) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [postPosition, setPostPosition] = useState([]);\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n \n@@ -89,9 +88,9 @@\n                 setPostPosition(e.coord);\n             });\n             \n         }\n-    }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n \n     useEffect(() => {\n         // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n         if (currentMyLocation && mapRef.current) {\n@@ -121,127 +120,4 @@\n     );\n };\n \n export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = () => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [postPosition, setPostPosition] = useState([]);\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            },\n-        );\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord);\n-            });\n-            \n-        }\n-    }, [currentMyLocation, mapState]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-        <div>\n-                <button onClick={onRefreshClick} >\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-                </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n"
                },
                {
                    "date": 1716206113537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,16 +79,14 @@\n                     size: new naver.maps.Size(28, 28),\n                     scaledSize: new naver.maps.Size(28, 28),\n                 },\n                 zIndex: 998,\n-            },\n-        );\n+            });\n \n             naver.maps.Event.addListener(map, 'click', function(e) {\n                 marker.setPosition(e.coord);\n-                setPostPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n             });\n-            \n         }\n     }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n \n     useEffect(() => {\n@@ -104,19 +102,18 @@\n \n     return (\n \n         <div>\n-                <button onClick={onRefreshClick} >\n+            <button onClick={onRefreshClick}>\n                 <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-                </button>\n+            </button>\n             \n             <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n             <div>\n                 <h4>Map Bounds:</h4>\n                 <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                 <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n             </div>\n-\n         </div>\n     );\n };\n \n"
                },
                {
                    "date": 1716206431392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,14 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = ({ setPostPosition }) => {\n+const UploadMap = ({ setPostPosition, address }) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n+    \n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n         setMapState({ zoom: 16, center: currentMyLocation });\n"
                },
                {
                    "date": 1716206510786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition, address }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+    const { naver } = window;\n+    \n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        \n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+    \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716206619547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition, address }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+    const { naver } = window;\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        \n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+    \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(setPostPosition.lat(), setPostPosition.lng()),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716206716209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition, setAddress }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+    const { naver } = window;\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        \n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+    \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(setPostPosition.lat(), setPostPosition.lng()),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+            <div>\n+                <button onClick={onLocationButton}>위치 설정</button>\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716206838424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,18 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = ({ setPostPosition, setAddress }) => {\n+const UploadMap = () => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n     const { naver } = window;\n \n+    const [postPosition, setPostPosition] = useState(null);\n+    const [address, setAddress] = useState('');\n+\n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n         setMapState({ zoom: 16, center: currentMyLocation });\n@@ -136,396 +139,4 @@\n     );\n };\n \n export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition, address }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const { naver } = window;\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        \n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-    \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(setPostPosition.lat(), setPostPosition.lng()),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition, address }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const { naver } = window;\n-    \n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        \n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-    \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition, address }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    \n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n"
                },
                {
                    "date": 1716207022393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,11 @@\n \n     const [postPosition, setPostPosition] = useState(null);\n     const [address, setAddress] = useState('');\n \n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n         setMapState({ zoom: 16, center: currentMyLocation });\n@@ -106,9 +109,9 @@\n     \n     const onLocationButton = () => {\n         naver.maps.Service.reverseGeocode(\n           {\n-            location: new naver.maps.LatLng(setPostPosition.lat(), setPostPosition.lng()),\n+            location: new naver.maps.LatLng(latitude, longitude),\n           },\n           function (status, response) {\n             if (status !== naver.maps.Service.Status.OK) {\n               return alert('Something Wrong!');\n@@ -118,8 +121,13 @@\n             setAddress(result.items[0].address);\n           }\n         );\n       };\n+\n+    setLatitude(setPostPosition.lat());\n+    setLongitude(setPostPosition.lng());\n+  \n+\n     return (\n \n         <div>\n             <button onClick={onRefreshClick}>\n"
                },
                {
                    "date": 1716207083119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,21 +4,14 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = () => {\n+const UploadMap = ({ setPostPosition }) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const { naver } = window;\n-\n-    const [postPosition, setPostPosition] = useState(null);\n-    const [address, setAddress] = useState('');\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n+    \n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n         setMapState({ zoom: 16, center: currentMyLocation });\n@@ -41,9 +34,9 @@\n     }, []);\n \n     //지도 그리기\n     useEffect(() => {\n-        \n+        const { naver } = window;\n         if (mapRef.current && naver && currentMyLocation) {\n             const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n             const map = new naver.maps.Map(mapRef.current, {\n                 center: mapState.center,\n@@ -105,29 +98,9 @@\n             });\n         }\n         \n     }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-    \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n \n-    setLatitude(setPostPosition.lat());\n-    setLongitude(setPostPosition.lng());\n-  \n-\n     return (\n \n         <div>\n             <button onClick={onRefreshClick}>\n@@ -139,11 +112,8 @@\n                 <h4>Map Bounds:</h4>\n                 <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                 <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n             </div>\n-            <div>\n-                <button onClick={onLocationButton}>위치 설정</button>\n-            </div>\n         </div>\n     );\n };\n \n"
                },
                {
                    "date": 1716269837419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,16 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = ({ setPostPosition }) => {\n+const UploadMap = ( ) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    \n+    const [postPosition, setPostPosition] = useState(null); // 포스트 위치 상태 관리\n+    const { naver } = window;\n+\n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n         setMapState({ zoom: 16, center: currentMyLocation });\n@@ -99,8 +101,29 @@\n         }\n         \n     }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+\n+      const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+    };\n+\n     return (\n \n         <div>\n             <button onClick={onRefreshClick}>\n@@ -112,8 +135,10 @@\n                 <h4>Map Bounds:</h4>\n                 <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                 <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n             </div>\n+            <button onClick={onLocationButton}>위치 설정</button>\n+            \n         </div>\n     );\n };\n \n"
                },
                {
                    "date": 1716269904307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = ( ) => {\n+const UploadMap = ( {latitude, longitude, address} ) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n"
                },
                {
                    "date": 1716270035649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,13 @@\n import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n import refresh from \"../../assets/images/icons/refresh.png\";\n \n-const UploadMap = ( {latitude, longitude, address} ) => {\n+const UploadMap = ({ setPostPosition }) => {\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const [postPosition, setPostPosition] = useState(null); // 포스트 위치 상태 관리\n-    const { naver } = window;\n \n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n@@ -101,29 +99,8 @@\n         }\n         \n     }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-\n-      const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-    };\n-\n     return (\n \n         <div>\n             <button onClick={onRefreshClick}>\n@@ -135,10 +112,8 @@\n                 <h4>Map Bounds:</h4>\n                 <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                 <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n             </div>\n-            <button onClick={onLocationButton}>위치 설정</button>\n-            \n         </div>\n     );\n };\n \n"
                },
                {
                    "date": 1716270228299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n+\n+    // useEffect(() => {\n+    //     // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+    //     if (currentMyLocation && mapRef.current) {\n+    //         setMapState({\n+    //             ...mapState,\n+    //             center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+    //         });\n+    //     }\n+        \n+    // }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716270237394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716270632639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import React, { useRef, useEffect, useState } from \"react\";\n+\n+import currentPin from \"../../assets/images/icons/currentPin.png\";\n+import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n+import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n+import refresh from \"../../assets/images/icons/refresh.png\";\n+\n+const UploadMap = ({ setPostPosition }) => {\n+    const [currentMyLocation, setCurrentMyLocation] = useState();\n+    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n+    const mapRef = useRef(null);\n+    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n+    const [selectedPosition, setSelectedPosition] = useState(null);\n+\n+    //지도 새로고침\n+    const onRefreshClick = () => {\n+        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n+        setMapState({ zoom: 16, center: currentMyLocation });\n+    };\n+\n+    //현재 위치 가져오기\n+    useEffect(() => {\n+        const success = (location) => {\n+            setCurrentMyLocation({\n+                lat: location.coords.latitude,\n+                lng: location.coords.longitude,\n+            });\n+        };\n+        const error = () => {\n+            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n+        };\n+        if (navigator.geolocation) {\n+            navigator.geolocation.getCurrentPosition(success, error);\n+        }\n+    }, []);\n+\n+    //지도 그리기\n+    useEffect(() => {\n+        const { naver } = window;\n+        if (mapRef.current && naver && currentMyLocation) {\n+            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n+            const map = new naver.maps.Map(mapRef.current, {\n+                center: mapState.center,\n+                zoom: mapState.zoom,\n+                minZoom: 10,\n+                maxZoom: 16,\n+                zoomControl: true,\n+                zoomControlOptions: {\n+                    style: naver.maps.ZoomControlStyle.SMALL,\n+                    position: naver.maps.Position.TOP_RIGHT\n+                }\n+            });\n+\n+            //지도 이동시 bounds 변경(좌표 받아오기)\n+            function updateBounds() {\n+                const bounds = map.getBounds();\n+                setBounds({\n+                    ne: {\n+                        lat: bounds.getNE().lat(),\n+                        lng: bounds.getNE().lng()\n+                    },\n+                    sw: {\n+                        lat: bounds.getSW().lat(),\n+                        lng: bounds.getSW().lng()\n+                    }\n+                });\n+            }\n+\n+            // Immediately update bounds when map is initialized\n+            updateBounds();\n+\n+            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n+            \n+            //현재 위치 dailyPin 마커 표시\n+            var marker = new naver.maps.Marker({\n+                position: location,\n+                map,\n+                icon: {\n+                    url: full_dailyPin,\n+                    size: new naver.maps.Size(28, 28),\n+                    scaledSize: new naver.maps.Size(28, 28),\n+                },\n+                zIndex: 998,\n+            });\n+\n+            naver.maps.Event.addListener(map, 'click', function(e) {\n+                marker.setPosition(e.coord);\n+                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n+            });\n+        }\n+    }, [currentMyLocation, mapState]);\n+\n+    useEffect(() => {\n+        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n+        if (currentMyLocation && mapRef.current) {\n+            setMapState({\n+                ...mapState,\n+                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n+            });\n+        }\n+        \n+    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n+    \n+    const handleSetLocation = () => {\n+        if (selectedPosition) {\n+            setPostPosition(selectedPosition);\n+        } else {\n+            alert(\"지도를 클릭하여 위치를 선택하세요.\");\n+        }\n+    };\n+    return (\n+\n+        <div>\n+            <button onClick={onRefreshClick}>\n+                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n+            </button>\n+            \n+            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n+            <div>\n+                <h4>Map Bounds:</h4>\n+                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n+                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n+            </div>\n+            <button onClick={handleSetLocation}>위치 설정</button>\n+        </div>\n+    );\n+};\n+\n+export default UploadMap;\n"
                },
                {
                    "date": 1716270698225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n     const [currentMyLocation, setCurrentMyLocation] = useState();\n     const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n     const mapRef = useRef(null);\n     const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-    const [selectedPosition, setSelectedPosition] = useState(null);\n \n     //지도 새로고침\n     const onRefreshClick = () => {\n         // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n@@ -100,15 +99,8 @@\n         }\n         \n     }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n     \n-    const handleSetLocation = () => {\n-        if (selectedPosition) {\n-            setPostPosition(selectedPosition);\n-        } else {\n-            alert(\"지도를 클릭하여 위치를 선택하세요.\");\n-        }\n-    };\n     return (\n \n         <div>\n             <button onClick={onRefreshClick}>\n@@ -120,370 +112,9 @@\n                 <h4>Map Bounds:</h4>\n                 <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                 <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n             </div>\n-            <button onClick={handleSetLocation}>위치 설정</button>\n         </div>\n     );\n };\n \n export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    // useEffect(() => {\n-    //     // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-    //     if (currentMyLocation && mapRef.current) {\n-    //         setMapState({\n-    //             ...mapState,\n-    //             center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-    //         });\n-    //     }\n-        \n-    // }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n-import React, { useRef, useEffect, useState } from \"react\";\n-\n-import currentPin from \"../../assets/images/icons/currentPin.png\";\n-import dailyPin from \"../../assets/images/icons/dailyPin.png\";\n-import full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\n-import refresh from \"../../assets/images/icons/refresh.png\";\n-\n-const UploadMap = ({ setPostPosition }) => {\n-    const [currentMyLocation, setCurrentMyLocation] = useState();\n-    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n-    const mapRef = useRef(null);\n-    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n-\n-    //지도 새로고침\n-    const onRefreshClick = () => {\n-        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n-        setMapState({ zoom: 16, center: currentMyLocation });\n-    };\n-\n-    //현재 위치 가져오기\n-    useEffect(() => {\n-        const success = (location) => {\n-            setCurrentMyLocation({\n-                lat: location.coords.latitude,\n-                lng: location.coords.longitude,\n-            });\n-        };\n-        const error = () => {\n-            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n-        };\n-        if (navigator.geolocation) {\n-            navigator.geolocation.getCurrentPosition(success, error);\n-        }\n-    }, []);\n-\n-    //지도 그리기\n-    useEffect(() => {\n-        const { naver } = window;\n-        if (mapRef.current && naver && currentMyLocation) {\n-            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n-            const map = new naver.maps.Map(mapRef.current, {\n-                center: mapState.center,\n-                zoom: mapState.zoom,\n-                minZoom: 10,\n-                maxZoom: 16,\n-                zoomControl: true,\n-                zoomControlOptions: {\n-                    style: naver.maps.ZoomControlStyle.SMALL,\n-                    position: naver.maps.Position.TOP_RIGHT\n-                }\n-            });\n-\n-            //지도 이동시 bounds 변경(좌표 받아오기)\n-            function updateBounds() {\n-                const bounds = map.getBounds();\n-                setBounds({\n-                    ne: {\n-                        lat: bounds.getNE().lat(),\n-                        lng: bounds.getNE().lng()\n-                    },\n-                    sw: {\n-                        lat: bounds.getSW().lat(),\n-                        lng: bounds.getSW().lng()\n-                    }\n-                });\n-            }\n-\n-            // Immediately update bounds when map is initialized\n-            updateBounds();\n-\n-            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n-            \n-            //현재 위치 dailyPin 마커 표시\n-            var marker = new naver.maps.Marker({\n-                position: location,\n-                map,\n-                icon: {\n-                    url: full_dailyPin,\n-                    size: new naver.maps.Size(28, 28),\n-                    scaledSize: new naver.maps.Size(28, 28),\n-                },\n-                zIndex: 998,\n-            });\n-\n-            naver.maps.Event.addListener(map, 'click', function(e) {\n-                marker.setPosition(e.coord);\n-                setPostPosition(e.coord); // 여기에서 위치를 부모 컴포넌트로 전달\n-            });\n-        }\n-    }, [currentMyLocation, mapState, setPostPosition]);  // `mapState`를 의존성 목록에 추가\n-\n-    useEffect(() => {\n-        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n-        if (currentMyLocation && mapRef.current) {\n-            setMapState({\n-                ...mapState,\n-                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n-            });\n-        }\n-        \n-    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n-\n-    return (\n-\n-        <div>\n-            <button onClick={onRefreshClick}>\n-                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n-            </button>\n-            \n-            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n-            <div>\n-                <h4>Map Bounds:</h4>\n-                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n-                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n-            </div>\n-        </div>\n-    );\n-};\n-\n-export default UploadMap;\n"
                }
            ],
            "date": 1716202545614,
            "name": "Commit-0",
            "content": "import React, { useRef, useEffect, useState } from \"react\";\n\nimport currentPin from \"../../assets/images/icons/currentPin.png\";\nimport dailyPin from \"../../assets/images/icons/dailyPin.png\";\nimport full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\nimport refresh from \"../../assets/images/icons/refresh.png\";\n\nconst UploadMap = () => {\n    const [currentMyLocation, setCurrentMyLocation] = useState();\n    const [post, setPost] = useState([]);\n    const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n    const mapRef = useRef(null);\n    const [mapState, setMapState] = useState({ zoom: 16, center: null }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n    const clickedMarkers = {}; // 클릭된 마커를 저장할 객체\n\n    //지도 새로고침\n    const onRefreshClick = () => {\n        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n        setMapState({ zoom: 16, center: currentMyLocation });\n    };\n\n    //현재 위치 가져오기\n    useEffect(() => {\n        const success = (location) => {\n            setCurrentMyLocation({\n                lat: location.coords.latitude,\n                lng: location.coords.longitude,\n            });\n        };\n        const error = () => {\n            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n        };\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(success, error);\n        }\n    }, []);\n\n    //지도 그리기\n    useEffect(() => {\n        const { naver } = window;\n        if (mapRef.current && naver && currentMyLocation) {\n            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n            const map = new naver.maps.Map(mapRef.current, {\n                center: mapState.center,\n                zoom: mapState.zoom,\n                minZoom: 10,\n                maxZoom: 16,\n                zoomControl: true,\n                zoomControlOptions: {\n                    style: naver.maps.ZoomControlStyle.SMALL,\n                    position: naver.maps.Position.TOP_RIGHT\n                }\n            });\n\n            //지도 이동시 bounds 변경(좌표 받아오기)\n            function updateBounds() {\n                const bounds = map.getBounds();\n                setBounds({\n                    ne: {\n                        lat: bounds.getNE().lat(),\n                        lng: bounds.getNE().lng()\n                    },\n                    sw: {\n                        lat: bounds.getSW().lat(),\n                        lng: bounds.getSW().lng()\n                    }\n                });\n            }\n\n            // Immediately update bounds when map is initialized\n            updateBounds();\n\n            naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n\n            //현재 위치 마커표시\n            new naver.maps.Marker({\n                position: location,\n                map,\n                icon: {\n                    url: currentPin,\n                    size: new naver.maps.Size(28, 28),\n                    scaledSize: new naver.maps.Size(28, 28),\n                },\n                zIndex: 999,\n            });\n\n\n            // 게시글 마커 표시\n            post.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n                createMarker(item, index);\n            });\n\n            // 지도의 확대/축소 및 중심 좌표 상태 변경\n            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n                setMapState({\n                    ...mapState,\n                    zoom: map.getZoom(),\n                });\n            });\n\n            naver.maps.Event.addListener(map, 'center_changed', () => {\n                setMapState({\n                    ...mapState,\n                    center: map.getCenter(),\n                });\n            });\n\n            \n        }\n    }, [currentMyLocation, post, mapState]);  // `mapState`를 의존성 목록에 추가\n\n    useEffect(() => {\n        // 페이지가 처음 로드될 때만 현재 위치를 중심으로 지도를 표시\n        if (currentMyLocation && mapRef.current) {\n            setMapState({\n                ...mapState,\n                center: new window.naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng),\n            });\n        }\n        \n    }, [currentMyLocation]); // currentMyLocation을 의존성 목록에 추가하여 처음 로드될 때만 실행\n\n    return (\n        <div>\n                <button onClick={onRefreshClick} >\n                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block', border: 'none'}} />\n                </button>\n            \n            <div ref={mapRef} style={{ width: \"300px\", height: \"300px\" }}></div>\n            <div>\n                <h4>Map Bounds:</h4>\n                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n            </div>\n\n        </div>\n    );\n};\n\nexport default UploadMap;\n"
        }
    ]
}