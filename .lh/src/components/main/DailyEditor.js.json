{
    "sourceFile": "src/components/main/DailyEditor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 73,
            "patches": [
                {
                    "date": 1716195281312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716195521458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n const DailyEdit = ({ postType }) => {\n     const [title, setTitle] = useState('');\n     const [body, setBody] = useState('');\n     const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    console.log(createdAt);\n     const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n     const [memberId] = useState('id_222');\n     const [address, setAddress] = useState('');\n     const [amPm, setAmPm] = useState('AM'); // 오후/오전\n"
                },
                {
                    "date": 1716196552462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,15 @@\n const DailyEdit = ({ postType }) => {\n     const [title, setTitle] = useState('');\n     const [body, setBody] = useState('');\n     const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    console.log(createdAt);\n+    //포맷: 2024-05-20T08:58:40.848Z\n     const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    const [memberId] = useState('id_222');\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n     const [address, setAddress] = useState('');\n+\n     const [amPm, setAmPm] = useState('AM'); // 오후/오전\n     const [hour, setHour] = useState('12'); // 시간\n     const [minute, setMinute] = useState('00'); // 분\n     const [todaySelected, setTodaySelected] = useState(false);\n@@ -35,25 +38,26 @@\n     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n \n     const onSave = async () => {\n         try {\n+            const formData = new FormData();\n+            formData.append('image', yourImageFile); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                expiredAt,\n+                latitude: yourLatitude, // Replace with your latitude value\n+                longitude: yourLongitude, // Replace with your longitude value\n+            }));\n+    \n             const response = await fetch(`http://localhost:3001/post/`, {\n                 method: 'POST',\n                 headers: {\n-                    'Content-Type': 'application/json',\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n                 },\n-                body: JSON.stringify({ \n-                    title,\n-                    body,\n-                    memberId,\n-                    likeNum: 0,\n-                    commentNum: 0,\n-                    createdAt,\n-                    expiredAt,\n-                    postType,\n-                    address,\n-                }),\n+                body: formData,\n             });\n+            \n             const data = await response.json();\n             alert('저장되었습니다.');\n             // 페이지 이동\n             navigate('/mymap');\n@@ -63,8 +67,9 @@\n             console.error('Error:', error);\n             // Optionally, show an error message to the user\n         }\n     };\n+    \n \n     const onUploadImage = async (blob, callback) => {\n         console.log(blob);\n         // Handle image upload logic\n"
                },
                {
                    "date": 1716196878043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                 latitude: yourLatitude, // Replace with your latitude value\n                 longitude: yourLongitude, // Replace with your longitude value\n             }));\n     \n-            const response = await fetch(`http://localhost:3001/post/`, {\n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n                 method: 'POST',\n                 headers: {\n                     'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n                 },\n"
                },
                {
                    "date": 1716196937944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,13 @@\n             formData.append('image', yourImageFile); // Add your image file here\n             formData.append('createDailyDto', JSON.stringify({ \n                 title,\n                 body,\n+                createdAt,\n                 expiredAt,\n-                latitude: yourLatitude, // Replace with your latitude value\n-                longitude: yourLongitude, // Replace with your longitude value\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n             }));\n     \n             const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n                 method: 'POST',\n"
                },
                {
                    "date": 1716197370707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,13 @@\n     const [minute, setMinute] = useState('00'); // 분\n     const [todaySelected, setTodaySelected] = useState(false);\n     const [tomorrowSelected, setTomorrowSelected] = useState(false);\n     const navigate = useNavigate();\n+    \n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n \n+\n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n         const interval = setInterval(() => {\n             // 매 초마다 현재 시간을 업데이트\n"
                },
                {
                    "date": 1716197394723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n     const [minute, setMinute] = useState('00'); // 분\n     const [todaySelected, setTodaySelected] = useState(false);\n     const [tomorrowSelected, setTomorrowSelected] = useState(false);\n     const navigate = useNavigate();\n-    \n+\n+    const [image, setImage] = useState(null);   \n     const [latitude, setLatitude] = useState(''); // [위도, 경도\n     const [longitude, setLongitude] = useState('');\n \n \n@@ -43,9 +44,9 @@\n \n     const onSave = async () => {\n         try {\n             const formData = new FormData();\n-            formData.append('image', yourImageFile); // Add your image file here\n+            formData.append('image', image); // Add your image file here\n             formData.append('createDailyDto', JSON.stringify({ \n                 title,\n                 body,\n                 createdAt,\n"
                },
                {
                    "date": 1716197488091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+\n+    const onUploadImage = async (blob, callback) => {\n+        console.log(blob);\n+        // Handle image upload logic\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span style={{ marginLeft: \"25px\" }}>\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    만료 시간:\n+                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n+                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n+                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n+                    </div>\n+                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n+                        <option value=\"AM\">오전</option>\n+                        <option value=\"PM\">오후</option>\n+                    </select>\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(12)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716197656264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,12 +75,11 @@\n             // Optionally, show an error message to the user\n         }\n     };\n     \n-\n-    const onUploadImage = async (blob, callback) => {\n-        console.log(blob);\n-        // Handle image upload logic\n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n     };\n \n     const onChangeTitle = (e) => {\n         setTitle(e.target.value);\n@@ -150,8 +149,11 @@\n                         ))}\n                     </select>\n                     분\n                 </div>\n+\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+\n             </div>\n             <br />\n             <button className='save' onClick={onSave}>저장</button>\n             \n"
                },
                {
                    "date": 1716197867898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+    console.log(formattedTime);\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span style={{ marginLeft: \"25px\" }}>\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    만료 시간:\n+                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n+                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n+                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n+                    </div>\n+                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n+                        <option value=\"AM\">오전</option>\n+                        <option value=\"PM\">오후</option>\n+                    </select>\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(12)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716197921473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,173 +98,9 @@\n         setAddress(e.target.value);\n     };\n \n     const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-    console.log(formattedTime);\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n \n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span style={{ marginLeft: \"25px\" }}>\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n     const handleTodayClick = () => {\n         const today = new Date();\n         today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n         today.setMinutes(Number(minute));\n@@ -324,189 +160,22 @@\n                     분\n                 </div>\n \n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n             </div>\n             <br />\n             <button className='save' onClick={onSave}>저장</button>\n             \n         </div>\n     );\n };\n \n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-\n-    const onUploadImage = async (blob, callback) => {\n-        console.log(blob);\n-        // Handle image upload logic\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span style={{ marginLeft: \"25px\" }}>\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            <Editor\n-                initialValue=\"hello react editor world!\"\n-                previewStyle=\"vertical\"\n-                height=\"600px\"\n-                initialEditType=\"wysiwyg\"\n-                useCommandShortcut={false}\n-                hideModeSwitch={true} //하단 타입 선택탭 숨기기\n-                plugins={[colorSyntax]}\n-                language=\"ko-KR\"\n-                onChange={setBody} // onChange event directly sets the body state\n-                hooks={{\n-                    addImageBlobHook: onUploadImage\n-                }}\n-            />\n-        </div>\n-    );\n-};\n-\n export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716197999204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,13 +158,14 @@\n                         ))}\n                     </select>\n                     분\n                 </div>\n-\n+                <br />\n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n                 {imagePreview && (\n                     <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n                 )}\n+                <br />\n                 <textarea\n                     placeholder=\"내용을 입력하세요.\"\n                     value={body}\n                     onChange={(e) => setBody(e.target.value)}\n"
                },
                {
                    "date": 1716198004680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span style={{ marginLeft: \"25px\" }}>\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    만료 시간:\n+                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n+                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n+                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n+                    </div>\n+                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n+                        <option value=\"AM\">오전</option>\n+                        <option value=\"PM\">오후</option>\n+                    </select>\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(12)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198034526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,193 +162,12 @@\n                 <br />\n                 <br />\n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n                 {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"50%\", height: \"auto\" }} />\n                 )}\n                 <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span style={{ marginLeft: \"25px\" }}>\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n                 <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n                 <textarea\n                     placeholder=\"내용을 입력하세요.\"\n                     value={body}\n                     onChange={(e) => setBody(e.target.value)}\n"
                },
                {
                    "date": 1716198039604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n                 <br />\n                 <br />\n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n                 {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"50%\", height: \"auto\" }} />\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"50%\", height: \"50%\" }} />\n                 )}\n                 <br />\n                 <br />\n                 <textarea\n"
                },
                {
                    "date": 1716198046892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span style={{ marginLeft: \"25px\" }}>\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    만료 시간:\n+                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n+                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n+                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n+                    </div>\n+                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n+                        <option value=\"AM\">오전</option>\n+                        <option value=\"PM\">오후</option>\n+                    </select>\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(12)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198073360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    만료 시간:\n+                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n+                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n+                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n+                    </div>\n+                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n+                        <option value=\"AM\">오전</option>\n+                        <option value=\"PM\">오후</option>\n+                    </select>\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(12)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198090202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,196 +128,14 @@\n                 <h2>\n                     제목: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n                 </h2>\n-                <span >\n+                <br />\n+                <span>\n                     주소: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n                 </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n                 <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span style={{ marginLeft: \"25px\" }}>\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n                 <div style={{ marginTop: \"5px\" }}>\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n@@ -364,189 +182,5 @@\n         </div>\n     );\n };\n \n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span style={{ marginLeft: \"25px\" }}>\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"50%\", height: \"50%\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198100133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,10 +133,10 @@\n                 <span>\n                     주소: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n                 </span>\n+                <div style={{ marginTop: \"5px\" }}>\n                 <br />\n-                <div style={{ marginTop: \"5px\" }}>\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     만료 시간:\n"
                },
                {
                    "date": 1716198110828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,15 +128,13 @@\n                 <h2>\n                     제목: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n                 </h2>\n-                <br />\n-                <span>\n+                <span >\n                     주소: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n                 </span>\n                 <div style={{ marginTop: \"5px\" }}>\n-                <br />\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     만료 시간:\n"
                },
                {
                    "date": 1716198431676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,19 +136,11 @@\n                 <div style={{ marginTop: \"5px\" }}>\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    만료 시간:\n-                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n-                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n-                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n-                    </div>\n-                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n-                        <option value=\"AM\">오전</option>\n-                        <option value=\"PM\">오후</option>\n-                    </select>\n+                    유효 시간:\n                     <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(12)].map((_, i) => (\n+                        {[...Array(24)].map((_, i) => (\n                             <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n                         ))}\n                     </select>\n                     시\n"
                },
                {
                    "date": 1716198447624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간:\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(23)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198484458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ margin: \"5px 10px 0 0\", position: \"relative\" }}>\n+                    유효 시간:\n+                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(23)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198495095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n                 </span>\n                 <div style={{ marginTop: \"5px\" }}>\n                     현재 시간: {formattedTime}\n                 </div>\n-                <div style={{ margin: \"5px 10px 0 0\", position: \"relative\" }}>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n                     <select value={hour} onChange={(e) => setHour(e.target.value)}>\n                         {[...Array(23)].map((_, i) => (\n                             <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n"
                },
                {
                    "date": 1716198509142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    //포맷: 2024-05-20T08:58:40.848Z\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [address, setAddress] = useState('');\n+\n+    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n+    const [hour, setHour] = useState('12'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [todaySelected, setTodaySelected] = useState(false);\n+    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n+    const navigate = useNavigate();\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const handleTodayClick = () => {\n+        const today = new Date();\n+        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        today.setMinutes(Number(minute));\n+        today.setSeconds(0);\n+        setExpiredAt(today.toISOString());\n+        setTodaySelected(true);\n+        setTomorrowSelected(false);\n+    };\n+\n+    const handleTomorrowClick = () => {\n+        const tomorrow = new Date();\n+        tomorrow.setDate(tomorrow.getDate() + 1);\n+        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n+        tomorrow.setMinutes(Number(minute));\n+        tomorrow.setSeconds(0);\n+        setExpiredAt(tomorrow.toISOString());\n+        setTodaySelected(false);\n+        setTomorrowSelected(true);\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간:\n+                    <select style={{ marginLeft: \"5px\", position: \"relative\" }} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(23)].map((_, i) => (\n+                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716198523456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,15 +137,15 @@\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n-                    <select style={{ marginLeft: \"5px\", position: \"relative\" }} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n                         {[...Array(23)].map((_, i) => (\n                             <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n                         ))}\n                     </select>\n                     시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n                         {[...Array(60)].map((_, i) => (\n                             <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                         ))}\n                     </select>\n@@ -172,533 +172,5 @@\n         </div>\n     );\n };\n \n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간:\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(23)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간:\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(23)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간:\n-                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716199002770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,18 @@\n import '@toast-ui/editor/dist/i18n/ko-kr';\n import '../../assets/scss/layout/_upload.scss';\n \n const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n     const [title, setTitle] = useState('');\n     const [body, setBody] = useState('');\n     const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    //포맷: 2024-05-20T08:58:40.848Z\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n     const [address, setAddress] = useState('');\n-\n-    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n-    const [hour, setHour] = useState('12'); // 시간\n+    const [hour, setHour] = useState('1'); // 시간\n     const [minute, setMinute] = useState('00'); // 분\n-    const [todaySelected, setTodaySelected] = useState(false);\n-    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n     const navigate = useNavigate();\n \n     const [image, setImage] = useState(null);   \n     const [imagePreview, setImagePreview] = useState(null);\n@@ -136,9 +131,9 @@\n                 <div style={{ marginTop: \"5px\" }}>\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간:\n+                    유효 기간:\n                     <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n                         {[...Array(23)].map((_, i) => (\n                             <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n                         ))}\n"
                },
                {
                    "date": 1716199251466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [showExpirationInput, setShowExpirationInput] = useState(false);\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+    const navigate = useNavigate();\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+\n+    useEffect(() => {\n+        if (showExpirationInput) {\n+            calculateExpiredAt();\n+        }\n+    }, [showExpirationInput, hour, minute, createdAt]);\n+\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const toggleExpirationInput = () => {\n+        setShowExpirationInput(!showExpirationInput);\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간:\n+                        <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n+                            {showExpirationInput ? \"입력 숨기기\" : \"유효 기간 입력\"}\n+                        </button>\n+                        {showExpirationInput && (\n+                            <div>\n+                                <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                                    {[...Array(24)].map((_, i) => (\n+                                        <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                                    ))}\n+                                </select>\n+                                시\n+                                <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                                    {[...Array(60)].map((_, i) => (\n+                                        <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                                    ))}\n+                                </select>\n+                                분\n+                                <div>\n+                                    만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                                </div>\n+                            </div>\n+                        )}\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716199270636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,11 +138,8 @@\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n-                        <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n-                            {showExpirationInput ? \"입력 숨기기\" : \"유효 기간 입력\"}\n-                        </button>\n                         {showExpirationInput && (\n                             <div>\n                                 <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n                                     {[...Array(24)].map((_, i) => (\n@@ -183,176 +180,5 @@\n         </div>\n     );\n };\n \n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const navigate = useNavigate();\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const handleTodayClick = () => {\n-        const today = new Date();\n-        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        today.setMinutes(Number(minute));\n-        today.setSeconds(0);\n-        setExpiredAt(today.toISOString());\n-        setTodaySelected(true);\n-        setTomorrowSelected(false);\n-    };\n-\n-    const handleTomorrowClick = () => {\n-        const tomorrow = new Date();\n-        tomorrow.setDate(tomorrow.getDate() + 1);\n-        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n-        tomorrow.setMinutes(Number(minute));\n-        tomorrow.setSeconds(0);\n-        setExpiredAt(tomorrow.toISOString());\n-        setTodaySelected(false);\n-        setTomorrowSelected(true);\n-    };\n-\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 기간:\n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(23)].map((_, i) => (\n-                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716199283701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,8 +138,11 @@\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n+                        <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n+                            {showExpirationInput ? \"입력 숨기기\" : \"유효 기간 입력\"}\n+                        </button>\n                         {showExpirationInput && (\n                             <div>\n                                 <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n                                     {[...Array(24)].map((_, i) => (\n"
                },
                {
                    "date": 1716199327085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,30 +138,26 @@\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n-                        <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n-                            {showExpirationInput ? \"입력 숨기기\" : \"유효 기간 입력\"}\n-                        </button>\n-                        {showExpirationInput && (\n-                            <div>\n-                                <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                                    {[...Array(24)].map((_, i) => (\n-                                        <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                                    ))}\n-                                </select>\n-                                시\n-                                <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                                    {[...Array(60)].map((_, i) => (\n-                                        <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                                    ))}\n-                                </select>\n-                                분\n-                                <div>\n-                                    만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                                </div>\n-                            </div>\n-                        )}\n+                    <div>\n+                        <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                            {[...Array(24)].map((_, i) => (\n+                                <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                            ))}\n+                        </select>\n+                        시\n+                        <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                            {[...Array(60)].map((_, i) => (\n+                                <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                            ))}\n+                        </select>\n+                        분\n+                        <div>\n+                            만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                        </div>\n+                    </div>\n+                        \n                 </div>\n                 <br />\n                 <br />\n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n"
                },
                {
                    "date": 1716199359876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,10 @@\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간:\n-                    <div>\n+\n+                    \n                         <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n                             {[...Array(24)].map((_, i) => (\n                                 <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                             ))}\n@@ -154,9 +155,9 @@\n                         분\n                         <div>\n                             만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n                         </div>\n-                    </div>\n+                   \n                         \n                 </div>\n                 <br />\n                 <br />\n"
                },
                {
                    "date": 1716199373548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [showExpirationInput, setShowExpirationInput] = useState(false);\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+    const navigate = useNavigate();\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+\n+    useEffect(() => {\n+        if (showExpirationInput) {\n+            calculateExpiredAt();\n+        }\n+    }, [showExpirationInput, hour, minute, createdAt]);\n+\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const toggleExpirationInput = () => {\n+        setShowExpirationInput(!showExpirationInput);\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <div>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                   \n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716199401994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n                             <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                         ))}\n                     </select>\n                     분\n-                    <div>\n+                    <div style={{ marginTop: \"5px\" }}>\n                         만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n                     </div>\n                    \n                 </div>\n@@ -177,189 +177,5 @@\n         </div>\n     );\n };\n \n-export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [showExpirationInput, setShowExpirationInput] = useState(false);\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-    const navigate = useNavigate();\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-\n-    useEffect(() => {\n-        if (showExpirationInput) {\n-            calculateExpiredAt();\n-        }\n-    }, [showExpirationInput, hour, minute, createdAt]);\n-\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const toggleExpirationInput = () => {\n-        setShowExpirationInput(!showExpirationInput);\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간:\n-\n-                    \n-                        <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                            {[...Array(24)].map((_, i) => (\n-                                <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                            ))}\n-                        </select>\n-                        시\n-                        <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                            {[...Array(60)].map((_, i) => (\n-                                <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                            ))}\n-                        </select>\n-                        분\n-                        <div>\n-                            만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                        </div>\n-                   \n-                        \n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716199421868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n                         value={address} \n                         onChange={onChangeAddress} />\n                 </span>\n                 <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n                     현재 시간: {formattedTime}\n                 </div>\n                 <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                     유효 시간: \n"
                },
                {
                    "date": 1716199492772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import { Editor } from '@toast-ui/react-editor';\n+import '@toast-ui/editor/dist/toastui-editor.css';\n+import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n+import 'tui-color-picker/dist/tui-color-picker.css';\n+import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n+import '@toast-ui/editor/dist/i18n/ko-kr';\n+import '../../assets/scss/layout/_upload.scss';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+    const [showExpirationInput, setShowExpirationInput] = useState(false);\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+\n+    const navigate = useNavigate();\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+\n+    useEffect(() => {\n+        if (showExpirationInput) {\n+            calculateExpiredAt();\n+        }\n+    }, [showExpirationInput, hour, minute, createdAt]);\n+\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                </span>\n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                   \n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+            \n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716202123626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n     const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n     const [address, setAddress] = useState('');\n     const [hour, setHour] = useState('1'); // 시간\n     const [minute, setMinute] = useState('00'); // 분\n-    const [showExpirationInput, setShowExpirationInput] = useState(false);\n \n     const [image, setImage] = useState(null);   \n     const [imagePreview, setImagePreview] = useState(null);\n \n@@ -39,16 +38,8 @@\n         // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n         return () => clearInterval(interval);\n     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n \n-\n-    useEffect(() => {\n-        if (showExpirationInput) {\n-            calculateExpiredAt();\n-        }\n-    }, [showExpirationInput, hour, minute, createdAt]);\n-\n-\n     const onSave = async () => {\n         try {\n             const formData = new FormData();\n             formData.append('image', image); // Add your image file here\n@@ -110,9 +101,8 @@\n         createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n         setExpiredAt(createdAtDate.toISOString());\n     };\n \n-\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n@@ -148,12 +138,12 @@\n                             <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                         ))}\n                     </select>\n                     분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n                     <div style={{ marginTop: \"5px\" }}>\n                         만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n                     </div>\n-                   \n                 </div>\n                 <br />\n                 <br />\n                 <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n@@ -170,192 +160,9 @@\n                 />\n             </div>\n             <br />\n             <button className='save' onClick={onSave}>저장</button>\n-            \n         </div>\n     );\n };\n \n export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-    const [showExpirationInput, setShowExpirationInput] = useState(false);\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-    const navigate = useNavigate();\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-\n-    useEffect(() => {\n-        if (showExpirationInput) {\n-            calculateExpiredAt();\n-        }\n-    }, [showExpirationInput, hour, minute, createdAt]);\n-\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const toggleExpirationInput = () => {\n-        setShowExpirationInput(!showExpirationInput);\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                </span>\n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                   \n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-            \n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716202604819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'tui-color-picker/dist/tui-color-picker.css';\n import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n import '@toast-ui/editor/dist/i18n/ko-kr';\n import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n \n const DailyEdit = ({ postType }) => {\n     // const [memberId] = useState('id_222');\n     //props로 받아오기\n@@ -120,8 +121,9 @@\n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n                         onChange={onChangeAddress} />\n                 </span>\n+                <UploadMap />\n                 <div style={{ marginTop: \"5px\" }}>\n                     <br />\n                     현재 시간: {formattedTime}\n                 </div>\n"
                },
                {
                    "date": 1716202910556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+\n+    useEffect(() => {\n+        if (showMap) {\n+            calculateExpiredAt();\n+        }\n+    }, [showExpirationInput, hour, minute, createdAt]);\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                </span>\n+                <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n+                    {showExpirationInput ? \"완료\" : \"지도 보기\"}\n+                </button>\n+                {showExpirationInput && (\n+                    <UploadMap />\n+                )}\n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n"
                },
                {
                    "date": 1716203034850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,15 +34,8 @@\n         // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n         return () => clearInterval(interval);\n     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n \n-\n-    useEffect(() => {\n-        if (showMap) {\n-            calculateExpiredAt();\n-        }\n-    }, [showExpirationInput, hour, minute, createdAt]);\n-\n     const onSave = async () => {\n         try {\n             const formData = new FormData();\n             formData.append('image', image); // Add your image file here\n@@ -104,8 +97,12 @@\n         createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n         setExpiredAt(createdAtDate.toISOString());\n     };\n \n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n@@ -123,12 +120,12 @@\n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n                         onChange={onChangeAddress} />\n                 </span>\n-                <button onClick={toggleExpirationInput} style={{ marginLeft: \"10px\" }}>\n-                    {showExpirationInput ? \"완료\" : \"지도 보기\"}\n+                <button onClick={clickMap} style={{ marginLeft: \"10px\" }}>\n+                    {showMap ? \"완료\" : \"지도 보기\"}\n                 </button>\n-                {showExpirationInput && (\n+                {showMap && (\n                     <UploadMap />\n                 )}\n                 <div style={{ marginTop: \"5px\" }}>\n                     <br />\n@@ -174,174 +171,4 @@\n     );\n };\n \n export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import { Editor } from '@toast-ui/react-editor';\n-import '@toast-ui/editor/dist/toastui-editor.css';\n-import colorSyntax from '@toast-ui/editor-plugin-color-syntax';\n-import 'tui-color-picker/dist/tui-color-picker.css';\n-import '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\n-import '@toast-ui/editor/dist/i18n/ko-kr';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-\n-    const navigate = useNavigate();\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                </span>\n-                <UploadMap />\n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n"
                },
                {
                    "date": 1716203045755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n                         onChange={onChangeAddress} />\n                 </span>\n-                <button onClick={clickMap} style={{ marginLeft: \"10px\" }}>\n+                <button onClick={clickMap}>\n                     {showMap ? \"완료\" : \"지도 보기\"}\n                 </button>\n                 {showMap && (\n                     <UploadMap />\n"
                },
                {
                    "date": 1716203079132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <UploadMap />\n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n"
                },
                {
                    "date": 1716203084382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,178 +172,4 @@\n     );\n };\n \n export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                </span>\n-                <button onClick={clickMap}>\n-                    {showMap ? \"완료\" : \"지도 보기\"}\n-                </button>\n-                {showMap && (\n-                    <UploadMap />\n-                )}\n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n"
                },
                {
                    "date": 1716203105955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n                         type=\"text\" \n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n                         onChange={onChangeAddress} />\n+                    <br />\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n"
                },
                {
                    "date": 1716205505257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,12 @@\n     const [longitude, setLongitude] = useState('');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n+    const { naver } = window;\n+    const naverLocation = useGeolocation();\n \n+\n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n         const interval = setInterval(() => {\n             // 매 초마다 현재 시간을 업데이트\n@@ -101,8 +104,24 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setLocation(result.items[0].address);\n+          }\n+        );\n+      };\n+\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n"
                },
                {
                    "date": 1716205522164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+    const { naver } = window;\n+    const naverLocation = useGeolocation();\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                    <br />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <UploadMap />\n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n"
                },
                {
                    "date": 1716205560910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState, useEffect } from 'react';\n import { useNavigate } from 'react-router-dom';\n import '../../assets/scss/layout/_upload.scss';\n import UploadMap from './UploadMap';\n+import useGeolocation from '../../hooks/useGeolocation';\n \n const DailyEdit = ({ postType }) => {\n     // const [memberId] = useState('id_222');\n     //props로 받아오기\n@@ -192,199 +193,4 @@\n     );\n };\n \n export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-    const { naver } = window;\n-    const naverLocation = useGeolocation();\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setLocation(result.items[0].address);\n-          }\n-        );\n-      };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                    <br />\n-                    <button onClick={clickMap}>\n-                        {showMap ? \"완료\" : \"지도 보기\"}\n-                    </button>\n-                    {showMap && (\n-                        <UploadMap />\n-                    )}\n-                </span>\n-                \n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n"
                },
                {
                    "date": 1716205661718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useState, useEffect } from 'react';\n import { useNavigate } from 'react-router-dom';\n import '../../assets/scss/layout/_upload.scss';\n import UploadMap from './UploadMap';\n-import useGeolocation from '../../hooks/useGeolocation';\n \n const DailyEdit = ({ postType }) => {\n     // const [memberId] = useState('id_222');\n     //props로 받아오기\n@@ -24,9 +23,8 @@\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n     const { naver } = window;\n-    const naverLocation = useGeolocation();\n \n \n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n"
                },
                {
                    "date": 1716205710955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n \n     const [image, setImage] = useState(null);   \n     const [imagePreview, setImagePreview] = useState(null);\n \n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n+    const [latitude, setLatitude] = useState('37.4572321'); // [위도, 경도\n+    const [longitude, setLongitude] = useState('127.1317152');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n     const { naver } = window;\n"
                },
                {
                    "date": 1716205798957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,13 @@\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n-                        <UploadMap />\n+                        <div>\n+                            <UploadMap />\n+                            <button onClick={onLocationButton}>위치 설정</button>\n+                        </div>\n+                       \n                     )}\n                 </span>\n                 \n                 <div style={{ marginTop: \"5px\" }}>\n"
                },
                {
                    "date": 1716206275966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEdit = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+    const { naver } = window;\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+\n+      const handlePositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+    };\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                    <br />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <div>\n+                            <UploadMap setPostPosition={handlePositionChange} />\n+                            <button onClick={onLocationButton}>위치 설정</button>\n+                        </div>\n+                       \n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEdit;\n"
                },
                {
                    "date": 1716206761336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n     const [longitude, setLongitude] = useState('');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n-    const { naver } = window;\n \n \n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n@@ -103,24 +102,8 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-\n       const handlePositionChange = (position) => {\n         setLatitude(position.lat());\n         setLongitude(position.lng());\n     };\n@@ -147,10 +130,9 @@\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n                         <div>\n-                            <UploadMap setPostPosition={handlePositionChange} />\n-                            <button onClick={onLocationButton}>위치 설정</button>\n+                            <UploadMap/>\n                         </div>\n                        \n                     )}\n                 </span>\n@@ -199,202 +181,4 @@\n     );\n };\n \n export default DailyEdit;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEdit = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState('37.4572321'); // [위도, 경도\n-    const [longitude, setLongitude] = useState('127.1317152');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-    const { naver } = window;\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                    <br />\n-                    <button onClick={clickMap}>\n-                        {showMap ? \"완료\" : \"지도 보기\"}\n-                    </button>\n-                    {showMap && (\n-                        <div>\n-                            <UploadMap />\n-                            <button onClick={onLocationButton}>위치 설정</button>\n-                        </div>\n-                       \n-                    )}\n-                </span>\n-                \n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEdit;\n"
                },
                {
                    "date": 1716207131876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,10 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n+ \n+\n       const handlePositionChange = (position) => {\n         setLatitude(position.lat());\n         setLongitude(position.lng());\n     };\n@@ -130,9 +132,10 @@\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n                         <div>\n-                            <UploadMap/>\n+                            <UploadMap setPostPosition={handlePositionChange} />\n+                            <button onClick={onLocationButton}>위치 설정</button>\n                         </div>\n                        \n                     )}\n                 </span>\n"
                },
                {
                    "date": 1716207161889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     const [longitude, setLongitude] = useState('');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n+    const { naver } = window;\n \n \n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n@@ -102,11 +103,25 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n- \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n \n-      const handlePositionChange = (position) => {\n+      const handlePostPositionChange = (position) => {\n         setLatitude(position.lat());\n         setLongitude(position.lng());\n     };\n     return (\n@@ -132,9 +147,9 @@\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n                         <div>\n-                            <UploadMap setPostPosition={handlePositionChange} />\n+                            <UploadMap setPostPosition={handlePostPositionChange} />\n                             <button onClick={onLocationButton}>위치 설정</button>\n                         </div>\n                        \n                     )}\n"
                },
                {
                    "date": 1716269675727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n     const [longitude, setLongitude] = useState('');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n-    const { naver } = window;\n \n \n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n@@ -103,28 +102,8 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n-    const onLocationButton = () => {\n-        naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n-            }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n-        );\n-      };\n-\n-      const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-    };\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n@@ -146,13 +125,9 @@\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n-                        <div>\n                             <UploadMap setPostPosition={handlePostPositionChange} />\n-                            <button onClick={onLocationButton}>위치 설정</button>\n-                        </div>\n-                       \n                     )}\n                 </span>\n                 \n                 <div style={{ marginTop: \"5px\" }}>\n"
                },
                {
                    "date": 1716269686180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n-                            <UploadMap setPostPosition={handlePostPositionChange} />\n+                            <UploadMap />\n                     )}\n                 </span>\n                 \n                 <div style={{ marginTop: \"5px\" }}>\n"
                },
                {
                    "date": 1716270063329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,13 @@\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n                     {showMap && (\n-                            <UploadMap />\n+                        <div>\n+                            <UploadMap setPostPosition={handlePostPositionChange} />\n+                            <button onClick={onLocationButton}>위치 설정</button>\n+                        </div>\n+                       \n                     )}\n                 </span>\n                 \n                 <div style={{ marginTop: \"5px\" }}>\n"
                },
                {
                    "date": 1716270068454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,28 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n+    const onLocationButton = () => {\n+        naver.maps.Service.reverseGeocode(\n+          {\n+            location: new naver.maps.LatLng(latitude, longitude),\n+          },\n+          function (status, response) {\n+            if (status !== naver.maps.Service.Status.OK) {\n+              return alert('Something Wrong!');\n+            }\n+    \n+            const result = response.result;\n+            setAddress(result.items[0].address);\n+          }\n+        );\n+      };\n+\n+      const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+    };\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n"
                },
                {
                    "date": 1716270522680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,28 +103,26 @@\n     const clickMap = () => {\n         setShowMap(!showMap);\n     };\n \n-    const onLocationButton = () => {\n+    const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n         naver.maps.Service.reverseGeocode(\n-          {\n-            location: new naver.maps.LatLng(latitude, longitude),\n-          },\n-          function (status, response) {\n-            if (status !== naver.maps.Service.Status.OK) {\n-              return alert('Something Wrong!');\n+            {\n+                location: new naver.maps.LatLng(position.lat(), position.lng()),\n+            },\n+            function (status, response) {\n+                if (status !== naver.maps.Service.Status.OK) {\n+                    return alert('Something Wrong!');\n+                }\n+\n+                const result = response.result;\n+                setAddress(result.items[0].address);\n             }\n-    \n-            const result = response.result;\n-            setAddress(result.items[0].address);\n-          }\n         );\n-      };\n+    };\n \n-      const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-    };\n     return (\n         <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n             <div>\n                 <h2>\n@@ -148,11 +146,9 @@\n                     </button>\n                     {showMap && (\n                         <div>\n                             <UploadMap setPostPosition={handlePostPositionChange} />\n-                            <button onClick={onLocationButton}>위치 설정</button>\n                         </div>\n-                       \n                     )}\n                 </span>\n                 \n                 <div style={{ marginTop: \"5px\" }}>\n"
                },
                {
                    "date": 1716270770410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n     const [longitude, setLongitude] = useState('');\n     const [showMap, setShowMap] = useState(false);\n \n     const navigate = useNavigate();\n+    const { naver } = window;\n \n \n     useEffect(() => {\n         // 컴포넌트가 처음 마운트될 때 한 번 실행\n@@ -133,9 +134,9 @@\n                         onChange={onChangeTitle} />\n                 </h2>\n                 <span >\n                     주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n                         type=\"text\" \n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n                         onChange={onChangeAddress} />\n"
                },
                {
                    "date": 1716270850025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { useNavigate } from 'react-router-dom';\n import '../../assets/scss/layout/_upload.scss';\n import UploadMap from './UploadMap';\n \n-const DailyEdit = ({ postType }) => {\n+const DailyEditor = ({ postType }) => {\n     // const [memberId] = useState('id_222');\n     //props로 받아오기\n \n     const [title, setTitle] = useState('');\n@@ -194,5 +194,5 @@\n         </div>\n     );\n };\n \n-export default DailyEdit;\n+export default DailyEditor;\n"
                },
                {
                    "date": 1716270936078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,12 +86,8 @@\n     const onChangeTitle = (e) => {\n         setTitle(e.target.value);\n     };\n \n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n     const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n \n     const calculateExpiredAt = () => {\n         const createdAtDate = new Date(createdAt);\n@@ -130,9 +126,9 @@\n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n                         type=\"text\" \n                         placeholder=\"제목을 입력하세요.\" \n                         value={title} \n-                        onChange={onChangeTitle} />\n+                        readOnly />\n                 </h2>\n                 <span >\n                     주소: \n                     <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n"
                },
                {
                    "date": 1716270972911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEditor = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+    const { naver } = window;\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+        naver.maps.Service.reverseGeocode(\n+            {\n+                location: new naver.maps.LatLng(position.lat(), position.lng()),\n+            },\n+            function (status, response) {\n+                if (status !== naver.maps.Service.Status.OK) {\n+                    return alert('Something Wrong!');\n+                }\n+\n+                const result = response.result;\n+                setAddress(result.items[0].address);\n+            }\n+        );\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        readOnly />\n+                    <br />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <div>\n+                            <UploadMap setPostPosition={handlePostPositionChange} />\n+                        </div>\n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEditor;\n"
                },
                {
                    "date": 1716270984401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,198 +191,4 @@\n     );\n };\n \n export default DailyEditor;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEditor = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-    const { naver } = window;\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-        naver.maps.Service.reverseGeocode(\n-            {\n-                location: new naver.maps.LatLng(position.lat(), position.lng()),\n-            },\n-            function (status, response) {\n-                if (status !== naver.maps.Service.Status.OK) {\n-                    return alert('Something Wrong!');\n-                }\n-\n-                const result = response.result;\n-                setAddress(result.items[0].address);\n-            }\n-        );\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        readOnly />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                    <br />\n-                    <button onClick={clickMap}>\n-                        {showMap ? \"완료\" : \"지도 보기\"}\n-                    </button>\n-                    {showMap && (\n-                        <div>\n-                            <UploadMap setPostPosition={handlePostPositionChange} />\n-                        </div>\n-                    )}\n-                </span>\n-                \n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEditor;\n"
                },
                {
                    "date": 1716270996259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,12 @@\n     const onChangeTitle = (e) => {\n         setTitle(e.target.value);\n     };\n \n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n     const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n \n     const calculateExpiredAt = () => {\n         const createdAtDate = new Date(createdAt);\n@@ -134,9 +138,9 @@\n                     <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n                         type=\"text\" \n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n-                        readOnly />\n+                        onChange={onChangeAddress} />\n                     <br />\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n"
                },
                {
                    "date": 1716271086789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,198 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEditor = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+    const { naver } = window;\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                createdAt,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            alert('저장되었습니다.');\n+            // 페이지 이동\n+            navigate('/mymap');\n+            console.log('Success:', data);\n+            // Optionally, show a success message or redirect the user\n+        } catch (error) {\n+            console.error('Error:', error);\n+            // Optionally, show an error message to the user\n+        }\n+    };\n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const onChangeAddress = (e) => {\n+        setAddress(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+        naver.maps.Service.reverseGeocode(\n+            {\n+                location: new naver.maps.LatLng(position.lat(), position.lng()),\n+            },\n+            function (status, response) {\n+                if (status !== naver.maps.Service.Status.OK) {\n+                    return alert('Something Wrong!');\n+                }\n+\n+                const result = response.result;\n+                setAddress(result.items[0].address);\n+            }\n+        );\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        onChange={onChangeAddress} />\n+                    <br />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <div>\n+                            <UploadMap setPostPosition={handlePostPositionChange} />\n+                        </div>\n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEditor;\n"
                },
                {
                    "date": 1716271128694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,13 +85,9 @@\n \n     const onChangeTitle = (e) => {\n         setTitle(e.target.value);\n     };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n+    \n     const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n \n     const calculateExpiredAt = () => {\n         const createdAtDate = new Date(createdAt);\n@@ -134,211 +130,13 @@\n                         onChange={onChangeTitle} />\n                 </h2>\n                 <span >\n                     주소: \n-                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        onChange={onChangeAddress} />\n-                    <br />\n-                    <button onClick={clickMap}>\n-                        {showMap ? \"완료\" : \"지도 보기\"}\n-                    </button>\n-                    {showMap && (\n-                        <div>\n-                            <UploadMap setPostPosition={handlePostPositionChange} />\n-                        </div>\n-                    )}\n-                </span>\n-                \n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEditor;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEditor = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-    const { naver } = window;\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                createdAt,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n-        } catch (error) {\n-            console.error('Error:', error);\n-            // Optionally, show an error message to the user\n-        }\n-    };\n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const onChangeAddress = (e) => {\n-        setAddress(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-        naver.maps.Service.reverseGeocode(\n-            {\n-                location: new naver.maps.LatLng(position.lat(), position.lng()),\n-            },\n-            function (status, response) {\n-                if (status !== naver.maps.Service.Status.OK) {\n-                    return alert('Something Wrong!');\n-                }\n-\n-                const result = response.result;\n-                setAddress(result.items[0].address);\n-            }\n-        );\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n                     <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n                         type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <span style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n                         placeholder=\"주소를 입력하세요.\" \n                         value={address} \n-                        onChange={onChangeAddress} />\n+                        readOnly />\n                     <br />\n                     <button onClick={clickMap}>\n                         {showMap ? \"완료\" : \"지도 보기\"}\n                     </button>\n"
                },
                {
                    "date": 1716272701473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,19 +43,18 @@\n             formData.append('image', image); // Add your image file here\n             formData.append('createDailyDto', JSON.stringify({ \n                 title,\n                 body,\n-                createdAt,\n                 expiredAt,\n                 address,\n                 latitude, // Replace with your latitude value\n                 longitude, // Replace with your longitude value\n             }));\n     \n-            const response = await fetch(`http://61.109.239.63:50001/post-service/daily`, {\n+            const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n                 method: 'POST',\n                 headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMUBnYWNob24uYWMua3IiLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjM2OTg1NTB9.QhADpTfUQrEekr3bwhZX1QTTNHnANtH2Zt8ptmb5jiw',\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTI1OTN9.4wTV60qrLWwENS6_Ez9DyQ5WFCIGfwXn7rcdYyWAono',\n                 },\n                 body: formData,\n             });\n             \n@@ -85,9 +84,9 @@\n \n     const onChangeTitle = (e) => {\n         setTitle(e.target.value);\n     };\n-    \n+\n     const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n \n     const calculateExpiredAt = () => {\n         const createdAtDate = new Date(createdAt);\n"
                },
                {
                    "date": 1716273106605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,24 +53,30 @@\n             const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n                 method: 'POST',\n                 headers: {\n                     'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTI1OTN9.4wTV60qrLWwENS6_Ez9DyQ5WFCIGfwXn7rcdYyWAono',\n+                    // 'Content-Type': 'multipart/form-data' // REMOVE this line\n                 },\n                 body: formData,\n             });\n             \n             const data = await response.json();\n-            alert('저장되었습니다.');\n-            // 페이지 이동\n-            navigate('/mymap');\n-            console.log('Success:', data);\n-            // Optionally, show a success message or redirect the user\n+            if (response.ok) {\n+                alert('저장되었습니다.');\n+                // 페이지 이동\n+                navigate('/mymap');\n+                console.log('Success:', data);\n+            } else {\n+                console.error('Error:', data);\n+                alert('저장에 실패했습니다.');\n+            }\n         } catch (error) {\n             console.error('Error:', error);\n-            // Optionally, show an error message to the user\n+            alert('저장 중 오류가 발생했습니다.');\n         }\n     };\n     \n+    \n     const handleImageUpload = (event) => {\n         const file = event.target.files[0];\n         setImage(file);\n         const reader = new FileReader();\n"
                },
                {
                    "date": 1716273226494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n             const data = await response.json();\n             if (response.ok) {\n                 alert('저장되었습니다.');\n                 // 페이지 이동\n-                navigate('/mymap');\n+                // navigate('/mymap');\n                 console.log('Success:', data);\n             } else {\n                 console.error('Error:', data);\n                 alert('저장에 실패했습니다.');\n"
                },
                {
                    "date": 1716273315305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import '../../assets/scss/layout/_upload.scss';\n+import UploadMap from './UploadMap';\n+\n+const DailyEditor = ({ postType }) => {\n+    // const [memberId] = useState('id_222');\n+    //props로 받아오기\n+\n+    const [title, setTitle] = useState('');\n+    const [body, setBody] = useState('');\n+    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n+    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n+    const [address, setAddress] = useState('');\n+    const [hour, setHour] = useState('1'); // 시간\n+    const [minute, setMinute] = useState('00'); // 분\n+\n+    const [image, setImage] = useState(null);   \n+    const [imagePreview, setImagePreview] = useState(null);\n+\n+    const [latitude, setLatitude] = useState(''); // [위도, 경도\n+    const [longitude, setLongitude] = useState('');\n+    const [showMap, setShowMap] = useState(false);\n+\n+    const navigate = useNavigate();\n+    const { naver } = window;\n+\n+\n+    useEffect(() => {\n+        // 컴포넌트가 처음 마운트될 때 한 번 실행\n+        const interval = setInterval(() => {\n+            // 매 초마다 현재 시간을 업데이트\n+            setCreatedAt(new Date().toISOString());\n+        }, 1000);\n+\n+        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n+        return () => clearInterval(interval);\n+    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n+\n+    const onSave = async () => {\n+        try {\n+            const formData = new FormData();\n+            formData.append('image', image); // Add your image file here\n+            formData.append('createDailyDto', JSON.stringify({ \n+                title,\n+                body,\n+                expiredAt,\n+                address,\n+                latitude, // Replace with your latitude value\n+                longitude, // Replace with your longitude value\n+            }));\n+    \n+            const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n+                method: 'POST',\n+                headers: {\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTI1OTN9.4wTV60qrLWwENS6_Ez9DyQ5WFCIGfwXn7rcdYyWAono',\n+                    // 'Content-Type': 'multipart/form-data' // REMOVE this line\n+                },\n+                body: formData,\n+            });\n+            \n+            const data = await response.json();\n+            if (response.ok) {\n+                alert('저장되었습니다.');\n+                // 페이지 이동\n+                // navigate('/mymap');\n+                console.log('Success:', data);\n+            } else {\n+                console.error('Error:', data);\n+                alert('저장에 실패했습니다.');\n+            }\n+        } catch (error) {\n+            console.error('Error:', error);\n+            alert('저장 중 오류가 발생했습니다.');\n+        }\n+    };\n+    \n+    \n+    const handleImageUpload = (event) => {\n+        const file = event.target.files[0];\n+        setImage(file);\n+        const reader = new FileReader();\n+        reader.onloadend = () => {\n+            setImagePreview(reader.result);\n+        };\n+        if (file) {\n+            reader.readAsDataURL(file);\n+        }\n+    };\n+\n+    const onChangeTitle = (e) => {\n+        setTitle(e.target.value);\n+    };\n+\n+    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n+\n+    const calculateExpiredAt = () => {\n+        const createdAtDate = new Date(createdAt);\n+        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n+        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n+        setExpiredAt(createdAtDate.toISOString());\n+    };\n+\n+    const clickMap = () => {\n+        setShowMap(!showMap);\n+    };\n+\n+    const handlePostPositionChange = (position) => {\n+        setLatitude(position.lat());\n+        setLongitude(position.lng());\n+        naver.maps.Service.reverseGeocode(\n+            {\n+                location: new naver.maps.LatLng(position.lat(), position.lng()),\n+            },\n+            function (status, response) {\n+                if (status !== naver.maps.Service.Status.OK) {\n+                    return alert('Something Wrong!');\n+                }\n+\n+                const result = response.result;\n+                setAddress(result.items[0].address);\n+            }\n+        );\n+    };\n+\n+    return (\n+        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n+            <div>\n+                <h2>\n+                    제목: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"제목을 입력하세요.\" \n+                        value={title} \n+                        onChange={onChangeTitle} />\n+                </h2>\n+                <span >\n+                    주소: \n+                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n+                        type=\"text\" \n+                        placeholder=\"주소를 입력하세요.\" \n+                        value={address} \n+                        readOnly />\n+                    <br />\n+                    <button onClick={clickMap}>\n+                        {showMap ? \"완료\" : \"지도 보기\"}\n+                    </button>\n+                    {showMap && (\n+                        <div>\n+                            <UploadMap setPostPosition={handlePostPositionChange} />\n+                        </div>\n+                    )}\n+                </span>\n+                \n+                <div style={{ marginTop: \"5px\" }}>\n+                    <br />\n+                    현재 시간: {formattedTime}\n+                </div>\n+                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n+                    유효 시간: \n+                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n+                        {[...Array(24)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    시\n+                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n+                        {[...Array(60)].map((_, i) => (\n+                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n+                        ))}\n+                    </select>\n+                    분\n+                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n+                    <div style={{ marginTop: \"5px\" }}>\n+                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n+                    </div>\n+                </div>\n+                <br />\n+                <br />\n+                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n+                {imagePreview && (\n+                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n+                )}\n+                <br />\n+                <br />\n+                <textarea\n+                    placeholder=\"내용을 입력하세요.\"\n+                    value={body}\n+                    onChange={(e) => setBody(e.target.value)}\n+                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n+                />\n+            </div>\n+            <br />\n+            <button className='save' onClick={onSave}>저장</button>\n+        </div>\n+    );\n+};\n+\n+export default DailyEditor;\n"
                },
                {
                    "date": 1716273480770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     \n             const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n                 method: 'POST',\n                 headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTI1OTN9.4wTV60qrLWwENS6_Ez9DyQ5WFCIGfwXn7rcdYyWAono',\n+                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTM0NDB9.0e3vrqbuDTeqEch_VdMfDpnAJZ7v2n5UoStcbaxMXC8',\n                     // 'Content-Type': 'multipart/form-data' // REMOVE this line\n                 },\n                 body: formData,\n             });\n@@ -196,203 +196,4 @@\n     );\n };\n \n export default DailyEditor;\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import '../../assets/scss/layout/_upload.scss';\n-import UploadMap from './UploadMap';\n-\n-const DailyEditor = ({ postType }) => {\n-    // const [memberId] = useState('id_222');\n-    //props로 받아오기\n-\n-    const [title, setTitle] = useState('');\n-    const [body, setBody] = useState('');\n-    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n-    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간   //포맷: 2024-05-20T08:58:40.848Z\n-    const [address, setAddress] = useState('');\n-    const [hour, setHour] = useState('1'); // 시간\n-    const [minute, setMinute] = useState('00'); // 분\n-\n-    const [image, setImage] = useState(null);   \n-    const [imagePreview, setImagePreview] = useState(null);\n-\n-    const [latitude, setLatitude] = useState(''); // [위도, 경도\n-    const [longitude, setLongitude] = useState('');\n-    const [showMap, setShowMap] = useState(false);\n-\n-    const navigate = useNavigate();\n-    const { naver } = window;\n-\n-\n-    useEffect(() => {\n-        // 컴포넌트가 처음 마운트될 때 한 번 실행\n-        const interval = setInterval(() => {\n-            // 매 초마다 현재 시간을 업데이트\n-            setCreatedAt(new Date().toISOString());\n-        }, 1000);\n-\n-        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n-        return () => clearInterval(interval);\n-    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n-\n-    const onSave = async () => {\n-        try {\n-            const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n-            formData.append('createDailyDto', JSON.stringify({ \n-                title,\n-                body,\n-                expiredAt,\n-                address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n-            }));\n-    \n-            const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n-                method: 'POST',\n-                headers: {\n-                    'Authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJsZWUyMGtpbUBnbWFpbC5jb20iLCJhdXRoIjoiUk9MRV9DTElFTlQiLCJleHAiOjE3MjQ5MTI1OTN9.4wTV60qrLWwENS6_Ez9DyQ5WFCIGfwXn7rcdYyWAono',\n-                    // 'Content-Type': 'multipart/form-data' // REMOVE this line\n-                },\n-                body: formData,\n-            });\n-            \n-            const data = await response.json();\n-            if (response.ok) {\n-                alert('저장되었습니다.');\n-                // 페이지 이동\n-                // navigate('/mymap');\n-                console.log('Success:', data);\n-            } else {\n-                console.error('Error:', data);\n-                alert('저장에 실패했습니다.');\n-            }\n-        } catch (error) {\n-            console.error('Error:', error);\n-            alert('저장 중 오류가 발생했습니다.');\n-        }\n-    };\n-    \n-    \n-    const handleImageUpload = (event) => {\n-        const file = event.target.files[0];\n-        setImage(file);\n-        const reader = new FileReader();\n-        reader.onloadend = () => {\n-            setImagePreview(reader.result);\n-        };\n-        if (file) {\n-            reader.readAsDataURL(file);\n-        }\n-    };\n-\n-    const onChangeTitle = (e) => {\n-        setTitle(e.target.value);\n-    };\n-\n-    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n-\n-    const calculateExpiredAt = () => {\n-        const createdAtDate = new Date(createdAt);\n-        createdAtDate.setHours(createdAtDate.getHours() + Number(hour));\n-        createdAtDate.setMinutes(createdAtDate.getMinutes() + Number(minute));\n-        setExpiredAt(createdAtDate.toISOString());\n-    };\n-\n-    const clickMap = () => {\n-        setShowMap(!showMap);\n-    };\n-\n-    const handlePostPositionChange = (position) => {\n-        setLatitude(position.lat());\n-        setLongitude(position.lng());\n-        naver.maps.Service.reverseGeocode(\n-            {\n-                location: new naver.maps.LatLng(position.lat(), position.lng()),\n-            },\n-            function (status, response) {\n-                if (status !== naver.maps.Service.Status.OK) {\n-                    return alert('Something Wrong!');\n-                }\n-\n-                const result = response.result;\n-                setAddress(result.items[0].address);\n-            }\n-        );\n-    };\n-\n-    return (\n-        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n-            <div>\n-                <h2>\n-                    제목: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"제목을 입력하세요.\" \n-                        value={title} \n-                        onChange={onChangeTitle} />\n-                </h2>\n-                <span >\n-                    주소: \n-                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} \n-                        type=\"text\" \n-                        placeholder=\"주소를 입력하세요.\" \n-                        value={address} \n-                        readOnly />\n-                    <br />\n-                    <button onClick={clickMap}>\n-                        {showMap ? \"완료\" : \"지도 보기\"}\n-                    </button>\n-                    {showMap && (\n-                        <div>\n-                            <UploadMap setPostPosition={handlePostPositionChange} />\n-                        </div>\n-                    )}\n-                </span>\n-                \n-                <div style={{ marginTop: \"5px\" }}>\n-                    <br />\n-                    현재 시간: {formattedTime}\n-                </div>\n-                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n-                    유효 시간: \n-                    <select style={{ marginLeft: \"5px\"}} value={hour} onChange={(e) => setHour(e.target.value)}>\n-                        {[...Array(24)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    시\n-                    <select style={{ marginLeft: \"5px\"}} value={minute} onChange={(e) => setMinute(e.target.value)}>\n-                        {[...Array(60)].map((_, i) => (\n-                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n-                        ))}\n-                    </select>\n-                    분\n-                    <button style={{ marginLeft: \"10px\" }} onClick={calculateExpiredAt}>적용</button>\n-                    <div style={{ marginTop: \"5px\" }}>\n-                        만료 시간: {expiredAt && new Date(expiredAt).toLocaleString('ko-KR')}\n-                    </div>\n-                </div>\n-                <br />\n-                <br />\n-                <input type=\"file\" onChange={handleImageUpload} accept=\"image/*\" />\n-                {imagePreview && (\n-                    <img src={imagePreview} alt=\"이미지 미리보기\" style={{ marginTop: \"10px\", maxWidth: \"100%\", height: \"auto\" }} />\n-                )}\n-                <br />\n-                <br />\n-                <textarea\n-                    placeholder=\"내용을 입력하세요.\"\n-                    value={body}\n-                    onChange={(e) => setBody(e.target.value)}\n-                    style={{ marginTop: \"10px\", width: \"100%\", height: \"200px\" }}\n-                />\n-            </div>\n-            <br />\n-            <button className='save' onClick={onSave}>저장</button>\n-        </div>\n-    );\n-};\n-\n-export default DailyEditor;\n"
                },
                {
                    "date": 1716273548575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,22 @@\n     }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n \n     const onSave = async () => {\n         try {\n+            if (!image) {\n+                alert(\"이미지를 선택해주세요.\");\n+                return;\n+            }\n+    \n             const formData = new FormData();\n-            formData.append('image', image); // Add your image file here\n+            formData.append('image', image); // Add the image file\n             formData.append('createDailyDto', JSON.stringify({ \n                 title,\n                 body,\n                 expiredAt,\n                 address,\n-                latitude, // Replace with your latitude value\n-                longitude, // Replace with your longitude value\n+                latitude,\n+                longitude,\n             }));\n     \n             const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n                 method: 'POST',\n@@ -59,8 +64,9 @@\n                 body: formData,\n             });\n             \n             const data = await response.json();\n+\n             if (response.ok) {\n                 alert('저장되었습니다.');\n                 // 페이지 이동\n                 // navigate('/mymap');\n"
                },
                {
                    "date": 1716273777447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,16 +45,16 @@\n             }\n     \n             const formData = new FormData();\n             formData.append('image', image); // Add the image file\n-            formData.append('createDailyDto', JSON.stringify({ \n+            formData.append('createDailyDto', new Blob([JSON.stringify({ \n                 title,\n                 body,\n                 expiredAt,\n                 address,\n                 latitude,\n                 longitude,\n-            }));\n+            })], { type: 'application/json' }));\n     \n             const response = await fetch(`http://210.109.54.52:50005/post-service/daily`, {\n                 method: 'POST',\n                 headers: {\n"
                }
            ],
            "date": 1716195281312,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Editor } from '@toast-ui/react-editor';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport colorSyntax from '@toast-ui/editor-plugin-color-syntax';\nimport 'tui-color-picker/dist/tui-color-picker.css';\nimport '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\nimport '@toast-ui/editor/dist/i18n/ko-kr';\nimport '../../assets/scss/layout/_upload.scss';\n\nconst DailyEdit = ({ postType }) => {\n    const [title, setTitle] = useState('');\n    const [body, setBody] = useState('');\n    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n    const [memberId] = useState('id_222');\n    const [address, setAddress] = useState('');\n    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n    const [hour, setHour] = useState('12'); // 시간\n    const [minute, setMinute] = useState('00'); // 분\n    const [todaySelected, setTodaySelected] = useState(false);\n    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // 컴포넌트가 처음 마운트될 때 한 번 실행\n        const interval = setInterval(() => {\n            // 매 초마다 현재 시간을 업데이트\n            setCreatedAt(new Date().toISOString());\n        }, 1000);\n\n        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n        return () => clearInterval(interval);\n    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n\n    const onSave = async () => {\n        try {\n            const response = await fetch(`http://localhost:3001/post/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \n                    title,\n                    body,\n                    memberId,\n                    likeNum: 0,\n                    commentNum: 0,\n                    createdAt,\n                    expiredAt,\n                    postType,\n                    address,\n                }),\n            });\n            const data = await response.json();\n            alert('저장되었습니다.');\n            // 페이지 이동\n            navigate('/mymap');\n            console.log('Success:', data);\n            // Optionally, show a success message or redirect the user\n        } catch (error) {\n            console.error('Error:', error);\n            // Optionally, show an error message to the user\n        }\n    };\n\n    const onUploadImage = async (blob, callback) => {\n        console.log(blob);\n        // Handle image upload logic\n    };\n\n    const onChangeTitle = (e) => {\n        setTitle(e.target.value);\n    };\n\n    const onChangeAddress = (e) => {\n        setAddress(e.target.value);\n    };\n\n    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n\n    const handleTodayClick = () => {\n        const today = new Date();\n        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n        today.setMinutes(Number(minute));\n        today.setSeconds(0);\n        setExpiredAt(today.toISOString());\n        setTodaySelected(true);\n        setTomorrowSelected(false);\n    };\n\n    const handleTomorrowClick = () => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n        tomorrow.setMinutes(Number(minute));\n        tomorrow.setSeconds(0);\n        setExpiredAt(tomorrow.toISOString());\n        setTodaySelected(false);\n        setTomorrowSelected(true);\n    };\n\n\n    return (\n        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n            <div>\n                <h2>\n                    제목: \n                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n                </h2>\n                <span style={{ marginLeft: \"25px\" }}>\n                    주소: \n                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n                </span>\n                <div style={{ marginTop: \"5px\" }}>\n                    현재 시간: {formattedTime}\n                </div>\n                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                    만료 시간:\n                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n                    </div>\n                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n                        <option value=\"AM\">오전</option>\n                        <option value=\"PM\">오후</option>\n                    </select>\n                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n                        {[...Array(12)].map((_, i) => (\n                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n                        ))}\n                    </select>\n                    시\n                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n                        {[...Array(60)].map((_, i) => (\n                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                        ))}\n                    </select>\n                    분\n                </div>\n            </div>\n            <br />\n            <button className='save' onClick={onSave}>저장</button>\n            <Editor\n                initialValue=\"hello react editor world!\"\n                previewStyle=\"vertical\"\n                height=\"600px\"\n                initialEditType=\"wysiwyg\"\n                useCommandShortcut={false}\n                hideModeSwitch={true} //하단 타입 선택탭 숨기기\n                plugins={[colorSyntax]}\n                language=\"ko-KR\"\n                onChange={setBody} // onChange event directly sets the body state\n                hooks={{\n                    addImageBlobHook: onUploadImage\n                }}\n            />\n        </div>\n    );\n};\n\nexport default DailyEdit;"
        }
    ]
}