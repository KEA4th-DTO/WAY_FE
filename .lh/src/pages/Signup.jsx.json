{
    "sourceFile": "src/pages/Signup.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1716194035441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716194241204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import React, { useState } from \"react\";\n+import CryptoJS from \"crypto-js\";\n+import \"../assets/style/signup.css\";\n+import axios from \"axios\";\n+const Signup = () => {\n+  const [email, setEmail] = useState(\"\");\n+  const [password, setPassword] = useState(\"\");\n+  const [confirmPassword, setConfirmPassword] = useState(\"\");\n+  const [phone, setPhone] = useState(\"\");\n+  const [name, setName] = useState(\"\");\n+  const [birthdate, setBirthdate] = useState(\"\");\n+  const [nickname, setNickname] = useState(\"\");\n+  const [emailCheck, setEmailCheck] = useState(false);\n+  const [nicknameCheck, setNicknameCheck] = useState(false);\n+  const [agreement, setAgreement] = useState(false);\n+  const [encryptedData, setEncryptedData] = useState(\"\");\n+\n+  const handleSignUp = () => {\n+    // 회원가입 정보 객체 생성\n+    const signUpData = {\n+      name: name,\n+      email: email,\n+      password: password,\n+      passwordCheck: confirmPassword,\n+      phone: phone,\n+      nickname: nickname,\n+      agreement: agreement,\n+    };\n+    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n+    const encryptedData = CryptoJS.AES.encrypt(\n+      JSON.stringify(signUpData),\n+      secretKey\n+    ).toString\n+\n+    console.log(signUpData);\n+\n+    if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n+      console.error(\"All fields are required.\");\n+      return;\n+    }\n+  \n+    if (password !== confirmPassword) {\n+      console.error(\"Passwords do not match.\");\n+      return;\n+    }\n+    axios\n+      .post(\"http://61.109.239.63:50001/member-service/signup\", signUpData, {\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        withCredentials: true,\n+      })\n+      .then((response) => {\n+        if (response.status !== 200) {\n+          console.log(response.status);\n+          throw new Error(\"Network response was not ok\");\n+        }\n+      })\n+      .then((data) => {\n+        console.log(\"회원가입이 완료되었습니다.\", data);\n+        window.location.href = \"http://localhost:3000/#/login\";\n+      })\n+      .catch((error) => {\n+        console.error(\"Error during signup:\", error);\n+        // 에러 발생 시 처리\n+      });\n+  };\n+\n+  const handleEmailCheck = () => {\n+    // 이메일 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Email checked!\");\n+    setEmailCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  const handleNicknameCheck = () => {\n+    // 닉네임 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Nickname checked!\");\n+    setNicknameCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  return (\n+    <div id=\"signup\">\n+      <div className=\"parent-container\">\n+        <div className=\"signup\">\n+          <h2>회원가입</h2>\n+        </div>\n+        <div className=\"signup-info\">\n+          <p>필수입력사항</p>\n+        </div>\n+        <div className=\"horizontal-divider\"></div>\n+        <div className=\"signup-contatiner\">\n+          <div className=\"email\">\n+            <label>이메일</label>\n+            <input\n+              type=\"email\"\n+              className=\"signup-email\"\n+              value={email}\n+              onChange={(e) => setEmail(e.target.value)}\n+              placeholder=\"이메일을 입력하세요\"\n+              required\n+            />\n+            <button className=\"btn-duplicate\" onClick={handleEmailCheck}>\n+              중복확인\n+            </button>\n+            {emailCheck && <p>이메일을 사용할 수 있습니다.</p>}\n+          </div>\n+          <div id=\"signup-pwd\" className=\"password\">\n+            <label>비밀번호</label>\n+            <input\n+              type=\"password\"\n+              value={password}\n+              onChange={(e) => setPassword(e.target.value)}\n+              className=\"signup-password\"\n+              placeholder=\"비밀번호를 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"re-pwd\">\n+            <label>비밀번호 재확인</label>\n+            <input\n+              type=\"password\"\n+              className=\"signup-repassword\"\n+              value={confirmPassword}\n+              onChange={(e) => setConfirmPassword(e.target.value)}\n+              placeholder=\"비밀번호를 다시 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"phoneNum\">\n+            <label>핸드폰 번호</label>\n+            <input\n+              type=\"tel\"\n+              className=\"signup-phoneNum\"\n+              value={phone}\n+              onChange={(e) => setPhone(e.target.value)}\n+              placeholder=\"010-1234-5678\"\n+              required\n+            />\n+          </div>\n+          <div className=\"name\">\n+            <label>이름</label>\n+            <input\n+              type=\"text\"\n+              value={name}\n+              className=\"signup-name\"\n+              onChange={(e) => setName(e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"nickName\">\n+            <label>닉네임</label>\n+            <input\n+              type=\"text\"\n+              value={nickname}\n+              className=\"signup-nickname\"\n+              onChange={(e) => setNickname(e.target.value)}\n+              placeholder=\"닉네임을 입력하세요\"\n+              required\n+            />\n+            <button onClick={handleNicknameCheck} className=\"btn-duplicate\">\n+              중복확인\n+            </button>\n+\n+            {nicknameCheck && <p>사용할 수 있는 닉네임입니다.</p>}\n+          </div>\n+          <div className=\"agree\">\n+            <label>\n+              <span>개인정보 동의</span>\n+              <input\n+                type=\"checkbox\"\n+                checked={agreement}\n+                onChange={(e) => setAgreement(e.target.checked)}\n+              />\n+            </label>\n+          </div>\n+        </div>\n+        <div className=\"signup-panel\">\n+          <button className=\"btn-signup\" onClick={handleSignUp}>\n+            회원가입\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Signup;\n"
                },
                {
                    "date": 1716194379685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,13 @@\n       phone: phone,\n       nickname: nickname,\n       agreement: agreement,\n     };\n-    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n-    const encryptedData = CryptoJS.AES.encrypt(\n-      JSON.stringify(signUpData),\n-      secretKey\n-    ).toString\n+    // const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n+    // const encryptedData = CryptoJS.AES.encrypt(\n+    //   JSON.stringify(signUpData),\n+    //   secretKey\n+    // ).toString();\n \n     console.log(signUpData);\n \n     if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n@@ -42,217 +42,42 @@\n     if (password !== confirmPassword) {\n       console.error(\"Passwords do not match.\");\n       return;\n     }\n-    axios\n-      .post(\"http://61.109.239.63:50001/member-service/signup\", signUpData, {\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        withCredentials: true,\n-      })\n-      .then((response) => {\n-        if (response.status !== 200) {\n-          console.log(response.status);\n-          throw new Error(\"Network response was not ok\");\n+    try {\n+      const response = await axios.post(\n+        \"http://61.109.239.63:50001/member-service/signup\",\n+        signUpData,\n+        {\n+          headers: {\n+            \"Content-Type\": \"application/json\",\n+          },\n+          withCredentials: true,\n         }\n-      })\n-      .then((data) => {\n-        console.log(\"회원가입이 완료되었습니다.\", data);\n+      );\n+\n+      if (response.status === 200) {\n+        console.log(\"회원가입이 완료되었습니다.\", response.data);\n         window.location.href = \"http://localhost:3000/#/login\";\n-      })\n-      .catch((error) => {\n-        console.error(\"Error during signup:\", error);\n-        // 에러 발생 시 처리\n-      });\n-  };\n-\n-  const handleEmailCheck = () => {\n-    // 이메일 중복 확인 처리 로직을 추가합니다.\n-    console.log(\"Email checked!\");\n-    setEmailCheck(true); // 예시에서는 무조건 true로 설정합니다.\n-  };\n-\n-  const handleNicknameCheck = () => {\n-    // 닉네임 중복 확인 처리 로직을 추가합니다.\n-    console.log(\"Nickname checked!\");\n-    setNicknameCheck(true); // 예시에서는 무조건 true로 설정합니다.\n-  };\n-\n-  return (\n-    <div id=\"signup\">\n-      <div className=\"parent-container\">\n-        <div className=\"signup\">\n-          <h2>회원가입</h2>\n-        </div>\n-        <div className=\"signup-info\">\n-          <p>필수입력사항</p>\n-        </div>\n-        <div className=\"horizontal-divider\"></div>\n-        <div className=\"signup-contatiner\">\n-          <div className=\"email\">\n-            <label>이메일</label>\n-            <input\n-              type=\"email\"\n-              className=\"signup-email\"\n-              value={email}\n-              onChange={(e) => setEmail(e.target.value)}\n-              placeholder=\"이메일을 입력하세요\"\n-              required\n-            />\n-            <button className=\"btn-duplicate\" onClick={handleEmailCheck}>\n-              중복확인\n-            </button>\n-            {emailCheck && <p>이메일을 사용할 수 있습니다.</p>}\n-          </div>\n-          <div id=\"signup-pwd\" className=\"password\">\n-            <label>비밀번호</label>\n-            <input\n-              type=\"password\"\n-              value={password}\n-              onChange={(e) => setPassword(e.target.value)}\n-              className=\"signup-password\"\n-              placeholder=\"비밀번호를 입력하세요\"\n-              required\n-            />\n-          </div>\n-          <div className=\"re-pwd\">\n-            <label>비밀번호 재확인</label>\n-            <input\n-              type=\"password\"\n-              className=\"signup-repassword\"\n-              value={confirmPassword}\n-              onChange={(e) => setConfirmPassword(e.target.value)}\n-              placeholder=\"비밀번호를 다시 입력하세요\"\n-              required\n-            />\n-          </div>\n-          <div className=\"phoneNum\">\n-            <label>핸드폰 번호</label>\n-            <input\n-              type=\"tel\"\n-              className=\"signup-phoneNum\"\n-              value={phone}\n-              onChange={(e) => setPhone(e.target.value)}\n-              placeholder=\"010-1234-5678\"\n-              required\n-            />\n-          </div>\n-          <div className=\"name\">\n-            <label>이름</label>\n-            <input\n-              type=\"text\"\n-              value={name}\n-              className=\"signup-name\"\n-              onChange={(e) => setName(e.target.value)}\n-              placeholder=\"이름을 입력하세요\"\n-              required\n-            />\n-          </div>\n-          <div className=\"nickName\">\n-            <label>닉네임</label>\n-            <input\n-              type=\"text\"\n-              value={nickname}\n-              className=\"signup-nickname\"\n-              onChange={(e) => setNickname(e.target.value)}\n-              placeholder=\"닉네임을 입력하세요\"\n-              required\n-            />\n-            <button onClick={handleNicknameCheck} className=\"btn-duplicate\">\n-              중복확인\n-            </button>\n-\n-            {nicknameCheck && <p>사용할 수 있는 닉네임입니다.</p>}\n-          </div>\n-          <div className=\"agree\">\n-            <label>\n-              <span>개인정보 동의</span>\n-              <input\n-                type=\"checkbox\"\n-                checked={agreement}\n-                onChange={(e) => setAgreement(e.target.checked)}\n-              />\n-            </label>\n-          </div>\n-        </div>\n-        <div className=\"signup-panel\">\n-          <button className=\"btn-signup\" onClick={handleSignUp}>\n-            회원가입\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default Signup;\n-import React, { useState } from \"react\";\n-import CryptoJS from \"crypto-js\";\n-import \"../assets/style/signup.css\";\n-import axios from \"axios\";\n-const Signup = () => {\n-  const [email, setEmail] = useState(\"\");\n-  const [password, setPassword] = useState(\"\");\n-  const [confirmPassword, setConfirmPassword] = useState(\"\");\n-  const [phone, setPhone] = useState(\"\");\n-  const [name, setName] = useState(\"\");\n-  const [birthdate, setBirthdate] = useState(\"\");\n-  const [nickname, setNickname] = useState(\"\");\n-  const [emailCheck, setEmailCheck] = useState(false);\n-  const [nicknameCheck, setNicknameCheck] = useState(false);\n-  const [agreement, setAgreement] = useState(false);\n-  const [encryptedData, setEncryptedData] = useState(\"\");\n-\n-  const handleSignUp = () => {\n-    // 회원가입 정보 객체 생성\n-    const signUpData = {\n-      name: name,\n-      email: email,\n-      password: password,\n-      passwordCheck: confirmPassword,\n-      phone: phone,\n-      nickname: nickname,\n-      agreement: agreement,\n-    };\n-    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n-    const encryptedData = CryptoJS.AES.encrypt(\n-      JSON.stringify(signUpData),\n-      secretKey\n-    ).toString();\n-\n-    console.log(signUpData);\n-\n-    if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n-      console.error(\"All fields are required.\");\n-      return;\n+      } else {\n+        console.error(\"Unexpected response status:\", response.status);\n+      }\n+    } catch (error) {\n+      if (error.response) {\n+        // The request was made, and the server responded with a status code\n+        // that falls out of the range of 2xx\n+        console.error(\"Error response data:\", error.response.data);\n+        console.error(\"Error response status:\", error.response.status);\n+        console.error(\"Error response headers:\", error.response.headers);\n+      } else if (error.request) {\n+        // The request was made, but no response was received\n+        console.error(\"Error request data:\", error.request);\n+      } else {\n+        // Something happened in setting up the request that triggered an Error\n+        console.error(\"Error message:\", error.message);\n+      }\n+      console.error(\"Error config:\", error.config);\n     }\n-  \n-    if (password !== confirmPassword) {\n-      console.error(\"Passwords do not match.\");\n-      return;\n-    }\n-    axios\n-      .post(\"http://61.109.239.63:50001/member-service/signup\", signUpData, {\n-        headers: {\n-          \"Content-Type\": \"application/json\",\n-        },\n-        withCredentials: true,\n-      })\n-      .then((response) => {\n-        if (response.status !== 200) {\n-          console.log(response.status);\n-          throw new Error(\"Network response was not ok\");\n-        }\n-      })\n-      .then((data) => {\n-        console.log(\"회원가입이 완료되었습니다.\", data);\n-        window.location.href = \"http://localhost:3000/#/login\";\n-      })\n-      .catch((error) => {\n-        console.error(\"Error during signup:\", error);\n-        // 에러 발생 시 처리\n-      });\n   };\n \n   const handleEmailCheck = () => {\n     // 이메일 중복 확인 처리 로직을 추가합니다.\n"
                },
                {
                    "date": 1716194410319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,21 @@\n   const [nicknameCheck, setNicknameCheck] = useState(false);\n   const [agreement, setAgreement] = useState(false);\n   const [encryptedData, setEncryptedData] = useState(\"\");\n \n-  const handleSignUp = () => {\n-    // 회원가입 정보 객체 생성\n+  const handleSignUp = async () => {\n+    // Ensure all required fields are provided\n+    if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n+      console.error(\"All fields are required.\");\n+      return;\n+    }\n+\n+    if (password !== confirmPassword) {\n+      console.error(\"Passwords do not match.\");\n+      return;\n+    }\n+\n+    // Construct the sign-up data object\n     const signUpData = {\n       name: name,\n       email: email,\n       password: password,\n@@ -25,25 +36,11 @@\n       phone: phone,\n       nickname: nickname,\n       agreement: agreement,\n     };\n-    // const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n-    // const encryptedData = CryptoJS.AES.encrypt(\n-    //   JSON.stringify(signUpData),\n-    //   secretKey\n-    // ).toString();\n \n-    console.log(signUpData);\n+    console.log(\"Sign-up data:\", signUpData);\n \n-    if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n-      console.error(\"All fields are required.\");\n-      return;\n-    }\n-  \n-    if (password !== confirmPassword) {\n-      console.error(\"Passwords do not match.\");\n-      return;\n-    }\n     try {\n       const response = await axios.post(\n         \"http://61.109.239.63:50001/member-service/signup\",\n         signUpData,\n"
                },
                {
                    "date": 1716271883815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import React, { useState } from \"react\";\n+import CryptoJS from \"crypto-js\";\n+import \"../assets/style/signup.css\";\n+import axios from \"axios\";\n+const Signup = () => {\n+  const [email, setEmail] = useState(\"\");\n+  const [password, setPassword] = useState(\"\");\n+  const [confirmPassword, setConfirmPassword] = useState(\"\");\n+  const [phone, setPhone] = useState(\"\");\n+  const [name, setName] = useState(\"\");\n+  const [birthdate, setBirthdate] = useState(\"\");\n+  const [nickname, setNickname] = useState(\"\");\n+  const [emailCheck, setEmailCheck] = useState(false);\n+  const [nicknameCheck, setNicknameCheck] = useState(false);\n+  const [agreement, setAgreement] = useState(false);\n+  const [encryptedData, setEncryptedData] = useState(\"\");\n+\n+  const handlePhoneChange = (e) => {\n+    const formattedPhoneNumber = e.target.value\n+      .replace(/[^\\d]/g, \"\") // Remove any non-digit characters\n+      .replace(/(\\d{3})(\\d{4})(\\d{4})/, \"$1-$2-$3\"); // Apply the desired format (010-0000-0000)\n+\n+    setPhone(formattedPhoneNumber);\n+  };\n+\n+  const handleSignUp = () => {\n+    // 회원가입 정보 객체 생성\n+    const signUpData = {\n+      name: name,\n+      email: email,\n+      password: password,\n+      passwordCheck: confirmPassword,\n+      // phone: phone,\n+      nickname: nickname,\n+      phoneNumber: phone,\n+      // agreement: agreement,\n+    };\n+    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n+    const encryptedData = CryptoJS.AES.encrypt(\n+      JSON.stringify(signUpData),\n+      secretKey\n+    ).toString();\n+\n+    console.log(signUpData);\n+    axios\n+      .post(\"http://61.109.239.63:50001/member-service/signup\", signUpData, {\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        withCredentials: true,\n+      })\n+      .then((response) => {\n+        if (response.status !== 200) {\n+          console.log(response.status);\n+          throw new Error(\"Network response was not ok\");\n+        }\n+      })\n+      .then((data) => {\n+        console.log(\"회원가입이 완료되었습니다.\", data);\n+        window.location.href = \"http://localhost:3000/#/login\";\n+      })\n+      .catch((error) => {\n+        console.error(\"Error during signup:\", error);\n+        // 에러 발생 시 처리\n+      });\n+  };\n+\n+  const handleEmailCheck = () => {\n+    // 이메일 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Email checked!\");\n+    setEmailCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  const handleNicknameCheck = () => {\n+    // 닉네임 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Nickname checked!\");\n+    setNicknameCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  return (\n+    <div id=\"signup\">\n+      <div className=\"parent-container\">\n+        <div className=\"signup\">\n+          <h2>회원가입</h2>\n+        </div>\n+        <div className=\"signup-info\">\n+          <p>필수입력사항</p>\n+        </div>\n+        <div className=\"horizontal-divider\"></div>\n+        <div className=\"signup-contatiner\">\n+          <div className=\"email\">\n+            <label>이메일</label>\n+            <input\n+              type=\"email\"\n+              className=\"signup-email\"\n+              value={email}\n+              onChange={(e) => setEmail(e.target.value)}\n+              placeholder=\"이메일을 입력하세요\"\n+              required\n+            />\n+            <button className=\"btn-duplicate\" onClick={handleEmailCheck}>\n+              중복확인\n+            </button>\n+            {emailCheck && <p>이메일을 사용할 수 있습니다.</p>}\n+          </div>\n+          <div id=\"signup-pwd\" className=\"password\">\n+            <label>비밀번호</label>\n+            <input\n+              type=\"password\"\n+              value={password}\n+              onChange={(e) => setPassword(e.target.value)}\n+              className=\"signup-password\"\n+              placeholder=\"비밀번호를 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"re-pwd\">\n+            <label>비밀번호 재확인</label>\n+            <input\n+              type=\"password\"\n+              className=\"signup-repassword\"\n+              value={confirmPassword}\n+              onChange={(e) => setConfirmPassword(e.target.value)}\n+              placeholder=\"비밀번호를 다시 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"phoneNum\">\n+            <label>핸드폰 번호</label>\n+            <input\n+              type=\"tel\"\n+              className=\"signup-phoneNum\"\n+              value={phone}\n+              onChange={handlePhoneChange}\n+              placeholder=\"010-1234-5678\"\n+              required\n+            />\n+          </div>\n+          <div className=\"name\">\n+            <label>이름</label>\n+            <input\n+              type=\"text\"\n+              value={name}\n+              className=\"signup-name\"\n+              onChange={(e) => setName(e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"nickName\">\n+            <label>닉네임</label>\n+            <input\n+              type=\"text\"\n+              value={nickname}\n+              className=\"signup-nickname\"\n+              onChange={(e) => setNickname(e.target.value)}\n+              placeholder=\"닉네임을 입력하세요\"\n+              required\n+            />\n+            <button onClick={handleNicknameCheck} className=\"btn-duplicate\">\n+              중복확인\n+            </button>\n+\n+            {nicknameCheck && <p>사용할 수 있는 닉네임입니다.</p>}\n+          </div>\n+          <div className=\"agree\">\n+            <label>\n+              <span>개인정보 동의</span>\n+              <input\n+                type=\"checkbox\"\n+                checked={agreement}\n+                onChange={(e) => setAgreement(e.target.checked)}\n+              />\n+            </label>\n+          </div>\n+        </div>\n+        <div className=\"signup-panel\">\n+          <button className=\"btn-signup\" onClick={handleSignUp}>\n+            회원가입\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Signup;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1716272047909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import React, { useState } from \"react\";\n+import CryptoJS from \"crypto-js\";\n+import \"../assets/style/signup.css\";\n+import axios from \"axios\";\n+const Signup = () => {\n+  const [email, setEmail] = useState(\"\");\n+  const [password, setPassword] = useState(\"\");\n+  const [confirmPassword, setConfirmPassword] = useState(\"\");\n+  const [phone, setPhone] = useState(\"\");\n+  const [name, setName] = useState(\"\");\n+  const [birthdate, setBirthdate] = useState(\"\");\n+  const [nickname, setNickname] = useState(\"\");\n+  const [emailCheck, setEmailCheck] = useState(false);\n+  const [nicknameCheck, setNicknameCheck] = useState(false);\n+  const [agreement, setAgreement] = useState(false);\n+  const [encryptedData, setEncryptedData] = useState(\"\");\n+\n+  const handlePhoneChange = (e) => {\n+    const formattedPhoneNumber = e.target.value\n+      .replace(/[^\\d]/g, \"\") // Remove any non-digit characters\n+      .replace(/(\\d{3})(\\d{4})(\\d{4})/, \"$1-$2-$3\"); // Apply the desired format (010-0000-0000)\n+\n+    setPhone(formattedPhoneNumber);\n+  };\n+\n+  const handleSignUp = () => {\n+    // 회원가입 정보 객체 생성\n+    const signUpData = {\n+      name: name,\n+      email: email,\n+      password: password,\n+      passwordCheck: confirmPassword,\n+      // phone: phone,\n+      nickname: nickname,\n+      phoneNumber: phone,\n+      // agreement: agreement,\n+    };\n+    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n+    const encryptedData = CryptoJS.AES.encrypt(\n+      JSON.stringify(signUpData),\n+      secretKey\n+    ).toString();\n+\n+    console.log(signUpData);\n+    axios\n+      .post(\"http://210.109.55.193:50004/member-service/signup\", signUpData, {\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        withCredentials: true,\n+      })\n+      .then((response) => {\n+        if (response.status !== 200) {\n+          console.log(response.status);\n+          throw new Error(\"Network response was not ok\");\n+        }\n+      })\n+      .then((data) => {\n+        console.log(\"회원가입이 완료되었습니다.\", data);\n+        window.location.href = \"http://localhost:3000/#/login\";\n+      })\n+      .catch((error) => {\n+        console.error(\"Error during signup:\", error);\n+        // 에러 발생 시 처리\n+      });\n+  };\n+\n+  const handleEmailCheck = () => {\n+    // 이메일 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Email checked!\");\n+    setEmailCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  const handleNicknameCheck = () => {\n+    // 닉네임 중복 확인 처리 로직을 추가합니다.\n+    console.log(\"Nickname checked!\");\n+    setNicknameCheck(true); // 예시에서는 무조건 true로 설정합니다.\n+  };\n+\n+  return (\n+    <div id=\"signup\">\n+      <div className=\"parent-container\">\n+        <div className=\"signup\">\n+          <h2>회원가입</h2>\n+        </div>\n+        <div className=\"signup-info\">\n+          <p>필수입력사항</p>\n+        </div>\n+        <div className=\"horizontal-divider\"></div>\n+        <div className=\"signup-contatiner\">\n+          <div className=\"email\">\n+            <label>이메일</label>\n+            <input\n+              type=\"email\"\n+              className=\"signup-email\"\n+              value={email}\n+              onChange={(e) => setEmail(e.target.value)}\n+              placeholder=\"이메일을 입력하세요\"\n+              required\n+            />\n+            <button className=\"btn-duplicate\" onClick={handleEmailCheck}>\n+              중복확인\n+            </button>\n+            {emailCheck && <p>이메일을 사용할 수 있습니다.</p>}\n+          </div>\n+          <div id=\"signup-pwd\" className=\"password\">\n+            <label>비밀번호</label>\n+            <input\n+              type=\"password\"\n+              value={password}\n+              onChange={(e) => setPassword(e.target.value)}\n+              className=\"signup-password\"\n+              placeholder=\"비밀번호를 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"re-pwd\">\n+            <label>비밀번호 재확인</label>\n+            <input\n+              type=\"password\"\n+              className=\"signup-repassword\"\n+              value={confirmPassword}\n+              onChange={(e) => setConfirmPassword(e.target.value)}\n+              placeholder=\"비밀번호를 다시 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"phoneNum\">\n+            <label>핸드폰 번호</label>\n+            <input\n+              type=\"tel\"\n+              className=\"signup-phoneNum\"\n+              value={phone}\n+              onChange={handlePhoneChange}\n+              placeholder=\"010-1234-5678\"\n+              required\n+            />\n+          </div>\n+          <div className=\"name\">\n+            <label>이름</label>\n+            <input\n+              type=\"text\"\n+              value={name}\n+              className=\"signup-name\"\n+              onChange={(e) => setName(e.target.value)}\n+              placeholder=\"이름을 입력하세요\"\n+              required\n+            />\n+          </div>\n+          <div className=\"nickName\">\n+            <label>닉네임</label>\n+            <input\n+              type=\"text\"\n+              value={nickname}\n+              className=\"signup-nickname\"\n+              onChange={(e) => setNickname(e.target.value)}\n+              placeholder=\"닉네임을 입력하세요\"\n+              required\n+            />\n+            <button onClick={handleNicknameCheck} className=\"btn-duplicate\">\n+              중복확인\n+            </button>\n+\n+            {nicknameCheck && <p>사용할 수 있는 닉네임입니다.</p>}\n+          </div>\n+          <div className=\"agree\">\n+            <label>\n+              <span>개인정보 동의</span>\n+              <input\n+                type=\"checkbox\"\n+                checked={agreement}\n+                onChange={(e) => setAgreement(e.target.checked)}\n+              />\n+            </label>\n+          </div>\n+        </div>\n+        <div className=\"signup-panel\">\n+          <button className=\"btn-signup\" onClick={handleSignUp}>\n+            회원가입\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default Signup;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1716194035441,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport \"../assets/style/signup.css\";\nimport axios from \"axios\";\nconst Signup = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [birthdate, setBirthdate] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [emailCheck, setEmailCheck] = useState(false);\n  const [nicknameCheck, setNicknameCheck] = useState(false);\n  const [agreement, setAgreement] = useState(false);\n  const [encryptedData, setEncryptedData] = useState(\"\");\n\n  const handleSignUp = () => {\n    // 회원가입 정보 객체 생성\n    const signUpData = {\n      name: name,\n      email: email,\n      password: password,\n      passwordCheck: confirmPassword,\n      phone: phone,\n      nickname: nickname,\n      agreement: agreement,\n    };\n    const secretKey = CryptoJS.lib.WordArray.random(32).toString();\n    const encryptedData = CryptoJS.AES.encrypt(\n      JSON.stringify(signUpData),\n      secretKey\n    ).toString();\n\n    console.log(signUpData);\n\n    if (!email || !password || !confirmPassword || !name || !nickname || !phone || !agreement) {\n      console.error(\"All fields are required.\");\n      return;\n    }\n  \n    if (password !== confirmPassword) {\n      console.error(\"Passwords do not match.\");\n      return;\n    }\n    axios\n      .post(\"http://61.109.239.63:50001/member-service/signup\", signUpData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        withCredentials: true,\n      })\n      .then((response) => {\n        if (response.status !== 200) {\n          console.log(response.status);\n          throw new Error(\"Network response was not ok\");\n        }\n      })\n      .then((data) => {\n        console.log(\"회원가입이 완료되었습니다.\", data);\n        window.location.href = \"http://localhost:3000/#/login\";\n      })\n      .catch((error) => {\n        console.error(\"Error during signup:\", error);\n        // 에러 발생 시 처리\n      });\n  };\n\n  const handleEmailCheck = () => {\n    // 이메일 중복 확인 처리 로직을 추가합니다.\n    console.log(\"Email checked!\");\n    setEmailCheck(true); // 예시에서는 무조건 true로 설정합니다.\n  };\n\n  const handleNicknameCheck = () => {\n    // 닉네임 중복 확인 처리 로직을 추가합니다.\n    console.log(\"Nickname checked!\");\n    setNicknameCheck(true); // 예시에서는 무조건 true로 설정합니다.\n  };\n\n  return (\n    <div id=\"signup\">\n      <div className=\"parent-container\">\n        <div className=\"signup\">\n          <h2>회원가입</h2>\n        </div>\n        <div className=\"signup-info\">\n          <p>필수입력사항</p>\n        </div>\n        <div className=\"horizontal-divider\"></div>\n        <div className=\"signup-contatiner\">\n          <div className=\"email\">\n            <label>이메일</label>\n            <input\n              type=\"email\"\n              className=\"signup-email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"이메일을 입력하세요\"\n              required\n            />\n            <button className=\"btn-duplicate\" onClick={handleEmailCheck}>\n              중복확인\n            </button>\n            {emailCheck && <p>이메일을 사용할 수 있습니다.</p>}\n          </div>\n          <div id=\"signup-pwd\" className=\"password\">\n            <label>비밀번호</label>\n            <input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"signup-password\"\n              placeholder=\"비밀번호를 입력하세요\"\n              required\n            />\n          </div>\n          <div className=\"re-pwd\">\n            <label>비밀번호 재확인</label>\n            <input\n              type=\"password\"\n              className=\"signup-repassword\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              placeholder=\"비밀번호를 다시 입력하세요\"\n              required\n            />\n          </div>\n          <div className=\"phoneNum\">\n            <label>핸드폰 번호</label>\n            <input\n              type=\"tel\"\n              className=\"signup-phoneNum\"\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n              placeholder=\"010-1234-5678\"\n              required\n            />\n          </div>\n          <div className=\"name\">\n            <label>이름</label>\n            <input\n              type=\"text\"\n              value={name}\n              className=\"signup-name\"\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"이름을 입력하세요\"\n              required\n            />\n          </div>\n          <div className=\"nickName\">\n            <label>닉네임</label>\n            <input\n              type=\"text\"\n              value={nickname}\n              className=\"signup-nickname\"\n              onChange={(e) => setNickname(e.target.value)}\n              placeholder=\"닉네임을 입력하세요\"\n              required\n            />\n            <button onClick={handleNicknameCheck} className=\"btn-duplicate\">\n              중복확인\n            </button>\n\n            {nicknameCheck && <p>사용할 수 있는 닉네임입니다.</p>}\n          </div>\n          <div className=\"agree\">\n            <label>\n              <span>개인정보 동의</span>\n              <input\n                type=\"checkbox\"\n                checked={agreement}\n                onChange={(e) => setAgreement(e.target.checked)}\n              />\n            </label>\n          </div>\n        </div>\n        <div className=\"signup-panel\">\n          <button className=\"btn-signup\" onClick={handleSignUp}>\n            회원가입\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Signup;\n"
        }
    ]
}