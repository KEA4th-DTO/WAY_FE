{"version":3,"file":"static/js/305.a907cb4a.chunk.js","mappings":"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","sources":["components/main/UserMapinfo.js","views/Mymap.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nimport currentPin from \"../../assets/images/icons/currentPin.png\";\nimport allPin from \"../../assets/images/icons/allPin.png\";\nimport dailyPin from \"../../assets/images/icons/dailyPin.png\";\nimport historyPin from \"../../assets/images/icons/historyPin.png\";\nimport full_allPin from \"../../assets/images/icons/full_allPin.png\";\nimport full_dailyPin from \"../../assets/images/icons/full_dailyPin.png\";\nimport full_historyPin from \"../../assets/images/icons/full_historyPin.png\";\nimport refresh from \"../../assets/images/icons/refresh.png\";\n\nconst UserMapinfo = ({userId}) => {\n    const [userPost, setUserPost] = useState([]);\n    const [currentMyLocation, setCurrentMyLocation] = useState();\n    // const [bounds, setBounds] = useState({ ne: {lat: '', lng: ''}, sw: {lat: '', lng: ''} });\n    const mapRef = useRef(null);\n    const [activePin, setActivePin] = useState(\"all\"); // 현재 활성화된 핀 타입을 관리\n    const k_center = { lat: 36.358949, lng: 127.7646949 }; \n    const [mapState, setMapState] = useState({ zoom: 7, center: k_center }); // 지도의 확대/축소 및 중심 좌표 상태 관리\n    const [activeMarker, setActiveMarker] = useState(null);\n    const clickedMarkers = {}; // 클릭된 마커를 저장할 객체\n\n    // allPin 을 누르면 allPin 이미지가 full_allPin으로 바뀌고 dailyPin, historyPin 이미지는 원래 이미지로 바뀌는 함수\n    const [allPinState, setAllPinState] = useState(true);\n    const [dailyPinState, setDailyPinState] = useState(false);\n    const [historyPinState, setHistoryPinState] = useState(false);\n    \n    const onClickAllPin = () => {\n        setAllPinState(true);\n        setDailyPinState(false);\n        setHistoryPinState(false);\n        setActivePin(\"all\");\n    };\n\n    const onClickDailyPin = () => {\n        setAllPinState(false);\n        setDailyPinState(true);\n        setHistoryPinState(false);\n        setActivePin(\"daily\");\n    };\n\n    const onClickHistoryPin = () => {\n        setAllPinState(false);\n        setDailyPinState(false);\n        setHistoryPinState(true);\n        setActivePin(\"history\");\n    };\n\n    //지도 새로고침\n    const onRefreshClick = () => {\n        // Refresh 버튼 클릭 시 지도 상태를 초기화하여 처음 로드될 때와 동일하게 설정\n        setMapState({ zoom: 7, center: {lat: '36.358949', lng: '127.7646949'} });\n    };\n\n    //데이터 가져오기\n    useEffect(()=>{\n        fetch('http://localhost:3001/post') //API경로 적어주기\n        .then(res => {\n            return res.json() //json으로 변환됨\n        })\n        .then(data => {\n            // memberId가 userId와 일치하는 경우에만 해당 게시물을 저장\n            const userPosts = data.filter(post => post.memberId === userId);\n            setUserPost(userPosts);\n        })\n        .catch(error => console.error(\"Error fetching data:\", error));\n    }, []);\n\n    //현재 위치 가져오기\n    useEffect(() => {\n        const success = (location) => {\n            setCurrentMyLocation({\n                lat: location.coords.latitude,\n                lng: location.coords.longitude,\n            });\n        };\n        const error = () => {\n            setCurrentMyLocation({ lat: 37.5666103, lng: 126.9783882 });\n        };\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(success, error);\n        }\n    }, []);\n\n    //지도 그리기\n    useEffect(() => {\n        const { naver } = window;\n        if (mapRef.current && naver && currentMyLocation) {\n            const location = new naver.maps.LatLng(currentMyLocation.lat, currentMyLocation.lng);\n            const map = new naver.maps.Map(mapRef.current, {\n                center: mapState.center,\n                zoom: mapState.zoom,\n                minZoom: 6, //12\n                maxZoom: 16,\n                zoomControl: true,\n                zoomControlOptions: {\n                    style: naver.maps.ZoomControlStyle.SMALL,\n                    position: naver.maps.Position.TOP_RIGHT\n                }\n            });\n\n            // //지도 이동시 bounds 변경(좌표 받아오기)\n            // function updateBounds() {\n            //     const bounds = map.getBounds();\n            //     setBounds({\n            //         ne: {\n            //             lat: bounds.getNE().lat(),\n            //             lng: bounds.getNE().lng()\n            //         },\n            //         sw: {\n            //             lat: bounds.getSW().lat(),\n            //             lng: bounds.getSW().lng()\n            //         }\n            //     });\n            // }\n\n            // // Immediately update bounds when map is initialized\n            // updateBounds();\n\n            // naver.maps.Event.addListener(map, 'bounds_changed', updateBounds);\n\n            //현재 위치 마커표시\n            new naver.maps.Marker({\n                position: location,\n                map,\n                icon: {\n                    url: currentPin,\n                    size: new naver.maps.Size(28, 28),\n                    scaledSize: new naver.maps.Size(28, 28),\n                },\n                zIndex: 999,\n            });\n\n           \n            // 게시글 마커 생성 시 클릭 이벤트 핸들러를 설정합니다.\n            const createMarker = (item, index) => {\n                const postLocation = new naver.maps.LatLng(parseFloat(item.latitude), parseFloat(item.longitude));\n                let iconUrl = item.postType === \"daily\" ? dailyPin : item.postType === \"history\" ? historyPin : allPin;\n                const marker = new naver.maps.Marker({\n                    position: postLocation,\n                    map,\n                    icon: {\n                        url: iconUrl,\n                        size: new naver.maps.Size(43, 43),\n                        scaledSize: new naver.maps.Size(43, 43),\n                    },\n                    zIndex: index,\n                });\n\n                // 마커에 클릭 이벤트를 추가합니다.\n                naver.maps.Event.addListener(marker, 'click', () => {\n                    handleMarkerClick(item.postId, marker);\n                });\n\n                return marker;\n            };\n\n            // postId에 따라 정상 아이콘을 반환합니다.\n            const getNormalPin = (postId) => {\n                const item = userPost.find(item => item.postId === postId);\n                // postId에 해당하는 게시물이 없을 경우 기본 아이콘 반환\n                if (!item) return allPin;\n                return item.postType === 'daily' ? dailyPin : item.postType === 'history' ? historyPin : allPin;\n            };\n\n            // postId에 따라 full 아이콘을 반환합니다.\n            const getFullPin = (postId) => {\n                const item = userPost.find(item => item.postId === postId);\n                // postId에 해당하는 게시물이 없을 경우 기본 아이콘 반환\n                if (!item) return allPin;\n                return item.postType === 'daily' ? full_dailyPin : full_historyPin;\n            };\n\n            // 마커 클릭 이벤트 핸들러\n            const handleMarkerClick = (postId, marker) => {\n                // postId에 해당하는 게시물을 찾습니다.\n                const item = userPost.find(item => item.postId === postId);\n                // postId에 해당하는 게시물이 없을 경우 처리하지 않습니다.\n                if (!item) return;\n\n                // 클릭된 마커가 이미 클릭된 상태인지 확인합니다.\n                if (activeMarker === postId) {\n                    // 클릭된 마커를 다시 클릭하면 원래 아이콘으로 변경하고 상태를 비활성화합니다.\n                    marker.setIcon({\n                        url: getNormalPin(postId),\n                        size: new naver.maps.Size(43, 43),\n                        scaledSize: new naver.maps.Size(43, 43),\n                    });\n                    setActiveMarker(null);\n                } else {\n                    // 현재 클릭된 마커의 상태를 변경합니다.\n                    setActiveMarker(postId);\n                    // 모든 클릭된 마커의 아이콘을 원래 아이콘으로 변경합니다.\n                    Object.values(clickedMarkers).forEach(clickedMarker => {\n                        clickedMarker.setIcon({\n                            url: getNormalPin(clickedMarker.get('postId')),\n                            size: new naver.maps.Size(43, 43),\n                            scaledSize: new naver.maps.Size(43, 43),\n                        });\n                    });\n                    // 클릭된 마커의 아이콘을 full 아이콘으로 변경합니다.\n                    marker.setIcon({\n                        url: getFullPin(postId),\n                        size: new naver.maps.Size(43, 43),\n                        scaledSize: new naver.maps.Size(43, 43),\n                    });\n                    // 클릭된 마커를 clickedMarkers에 저장합니다.\n                    clickedMarkers[postId] = marker;\n                }\n            };\n\n\n            // 게시글 마커 표시\n            userPost.filter(item => activePin === 'all' || item.postType === activePin).forEach((item, index) => {\n                createMarker(item, index);\n            });\n\n\n\n            // 지도의 확대/축소 및 중심 좌표 상태 변경\n            naver.maps.Event.addListener(map, 'zoom_changed', () => {\n                setMapState({\n                    ...mapState,\n                    zoom: map.getZoom(),\n                });\n            });\n\n            naver.maps.Event.addListener(map, 'center_changed', () => {\n                setMapState({\n                    ...mapState,\n                    center: map.getCenter(),\n                });\n            });\n\n            \n\n\n        }\n    }, [currentMyLocation, userPost, activePin, mapState]);  // `activePin` 및 `mapState`를 의존성 목록에 추가\n\n   \n    return (\n        <div>\n                <button onClick={onRefreshClick} >\n                <img src={refresh} alt=\"refresh\" style={{ width: '20px', height: '20px', display: 'inline-block' }} />\n                </button>\n            \n            <div style={{ display: 'inline-block', marginLeft: '280px', border:\"3px solid red\" }}>\n                <span style={{ fontSize: '10px', margin:\"3px\" }}>all pin</span>\n                <span style={{ fontSize: '10px', margin:\"3px\" }}>daily pin</span>\n                <span style={{ fontSize: '10px', margin:\"3px\" }}>history pin</span>\n                <br />\n                <button onClick={onClickAllPin} style={{ border: \"none\" }}>\n                    <img src={allPinState ? full_allPin : allPin} alt=\"allPin\" style={{ width: '30px', height: '30px' }} />\n                </button>\n                <button onClick={onClickDailyPin} style={{ border: \"none\"}}>\n                    <img src={dailyPinState ? full_dailyPin : dailyPin} alt=\"dailyPin\" style={{ width: '30px', height: '30px' }} />\n                </button>\n                <button onClick={onClickHistoryPin} style={{ border: \"none\" }}>\n                    <img src={historyPinState ? full_historyPin : historyPin} alt=\"historyPin\" style={{ width: '30px', height: '30px' }} />\n                </button> \n            </div>\n            \n            <div ref={mapRef} style={{ width: \"500px\", height: \"500px\" }}></div>\n            {/* <div>\n                <h4>Map Bounds:</h4>\n                <p>North-East Latitude: {bounds.ne.lat}, Longitude: {bounds.ne.lng}</p>\n                <p>South-West Latitude: {bounds.sw.lat}, Longitude: {bounds.sw.lng}</p>\n            </div> */}\n\n        </div>\n    );\n};\n\nexport default UserMapinfo;\n","import React, { useState, useEffect } from \"react\";\r\nimport DailyList from \"../components/main/DailyList\";\r\nimport HistoryList from \"../components/main/HistoryList\";\r\nimport UserMapinfo from \"../components/main/UserMapinfo\";\r\n\r\nconst Mymap = () => {\r\n  //데이터 가져오기\r\n  const [userPost, setUserPost] = useState([]);\r\n  const userId = \"id_222\"; //임시로 아이디 지정\r\n\r\n  useEffect(()=>{\r\n      fetch('http://localhost:3001/post') //API경로 적어주기\r\n      .then(res => {\r\n          return res.json() //json으로 변환됨\r\n      })\r\n      .then(data => {\r\n          // memberId가 userId와 일치하는 경우에만 해당 게시물을 저장\r\n          const userPosts = data.filter(post => post.memberId === userId);\r\n          setUserPost(userPosts);\r\n      })\r\n      .catch(error => console.error(\"Error fetching data:\", error));\r\n  }, []);\r\n  \r\n\r\n  return ( \r\n    <div id=\"local-con\" style={{border: \"5px solid red\", display: \"flex\", width: \"950px\"}}>\r\n      {/* 지도 & 핀*/}\r\n      <div id=\"map-con\" style={{border: \"3px solid blue\"}}>\r\n        <div>\r\n          <span className=\"initial-main-page-text\">\r\n            마이맵\r\n          </span>\r\n          <UserMapinfo userId={userId} />\r\n        </div>\r\n      </div>\r\n        \r\n        {/* 게시글*/}\r\n        <div className=\"initial-main-page-frame\" style={{border: \"3px solid green\", marginLeft: \"20px\"}}>\r\n          <span className=\"initial-main-page-text\" >\r\n            게시글  {userPost.length}\r\n          </span>\r\n      \r\n          <div style={{border: \"3px solid yellow\", overflow: \"auto\", marginTop: \"10%\", width: \"410px\", height: \"640px\"}}>\r\n        {/* postType에 따라 DailyPost 또는 HistoryPost 가져오기 */}\r\n            {userPost.map(item => {\r\n                if (item.postType === 'daily') { \r\n                    return <DailyList key={item.id} data={item} />;\r\n                } else if (item.postType === 'history') { \r\n                    return <HistoryList key={item.id} data={item} />;\r\n                }\r\n                return null;\r\n            })}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Mymap;\r\n\r\n\r\n"],"names":["_ref","userId","userPost","setUserPost","useState","currentMyLocation","setCurrentMyLocation","mapRef","useRef","activePin","setActivePin","mapState","setMapState","zoom","center","lat","lng","activeMarker","setActiveMarker","clickedMarkers","allPinState","setAllPinState","dailyPinState","setDailyPinState","historyPinState","setHistoryPinState","useEffect","fetch","then","res","json","data","userPosts","filter","post","memberId","catch","error","console","success","location","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","naver","window","current","maps","LatLng","map","Map","minZoom","maxZoom","zoomControl","zoomControlOptions","style","ZoomControlStyle","SMALL","position","Position","TOP_RIGHT","Marker","icon","url","currentPin","size","Size","scaledSize","zIndex","createMarker","item","index","postLocation","parseFloat","iconUrl","postType","dailyPin","historyPin","allPin","marker","Event","addListener","handleMarkerClick","postId","getNormalPin","find","getFullPin","full_dailyPin","full_historyPin","setIcon","Object","values","forEach","clickedMarker","get","getZoom","getCenter","_jsxs","children","_jsx","onClick","onRefreshClick","src","refresh","alt","width","height","display","marginLeft","border","fontSize","margin","onClickAllPin","full_allPin","onClickDailyPin","onClickHistoryPin","ref","Mymap","id","className","UserMapinfo","length","overflow","marginTop","DailyList","HistoryList"],"sourceRoot":""}