{"version":3,"file":"static/js/103.12a2f4f8.chunk.js","mappings":"wOAUA,MAuJA,EAvJkBA,IAAmB,IAAlB,SAAEC,GAAUD,EAC3B,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,KAC1BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAAIK,MAAOC,gBAC/CC,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,KACpCS,IAAYT,EAAAA,EAAAA,UAAS,WACrBU,EAASC,IAAcX,EAAAA,EAAAA,UAAS,KAChCY,EAAMC,IAAWb,EAAAA,EAAAA,UAAS,OAC1Bc,EAAMC,IAAWf,EAAAA,EAAAA,UAAS,OAC1BgB,EAAQC,IAAajB,EAAAA,EAAAA,UAAS,OAC9BkB,EAAeC,IAAoBnB,EAAAA,EAAAA,WAAS,IAC5CoB,EAAkBC,IAAuBrB,EAAAA,EAAAA,WAAS,GACnDsB,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KAEN,MAAMC,EAAWC,aAAY,KAEzBtB,GAAa,IAAIC,MAAOC,cAAc,GACvC,KAGH,MAAO,IAAMqB,cAAcF,EAAS,GACrC,IAEH,MA4CMG,EAAgB,IAAIvB,KAAKF,GAAW0B,eAAe,SAwBzD,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAYC,MAAO,CAAEC,SAAU,YAAaC,SAAA,EACvDJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACIJ,EAAAA,EAAAA,MAAA,MAAAI,SAAA,CAAI,iBAEAC,EAAAA,EAAAA,KAAA,SAAOH,MAAO,CAAEI,WAAY,OAAQC,OAAQ,OAAQC,MAAO,SAAWC,KAAK,OAAOC,YAAY,qDAAaC,MAAO3C,EAAO4C,SArClHC,IACnB5C,EAAS4C,EAAEC,OAAOH,MAAM,QAsChBX,EAAAA,EAAAA,MAAA,QAAME,MAAO,CAAEI,WAAY,QAASF,SAAA,CAAC,iBAEjCC,EAAAA,EAAAA,KAAA,SAAOH,MAAO,CAAEI,WAAY,OAAQC,OAAQ,OAAQC,MAAO,SAAWC,KAAK,OAAOC,YAAY,qDAAaC,MAAO/B,EAASgC,SArClHC,IACrBhC,EAAWgC,EAAEC,OAAOH,MAAM,QAsClBX,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEa,UAAW,OAAQX,SAAA,CAAC,8BACtBN,MAEZE,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEa,UAAW,MAAOZ,SAAU,YAAaC,SAAA,CAAC,8BAEpDJ,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEc,QAAS,eAAgBC,YAAa,OAAQb,SAAA,EACxDC,EAAAA,EAAAA,KAAA,UAAQa,QAvCHC,KACrB,MAAMC,EAAQ,IAAI7C,KAClB6C,EAAMC,SAAkB,OAATvC,EAAgBwC,OAAOtC,GAAQ,GAAKsC,OAAOtC,IAC1DoC,EAAMG,WAAWD,OAAOpC,IACxBkC,EAAMI,WAAW,GACjB9C,EAAa0C,EAAM5C,eACnBa,GAAiB,GACjBE,GAAoB,EAAM,EAgCyBU,UAAWb,EAAgB,QAAU,WAAWgB,SAAC,kBACpFC,EAAAA,EAAAA,KAAA,UAAQa,QA9BAO,KACxB,MAAMC,EAAW,IAAInD,KACrBmD,EAASC,QAAQD,EAASE,UAAY,GACtCF,EAASL,SAAkB,OAATvC,EAAgBwC,OAAOtC,GAAQ,GAAKsC,OAAOtC,IAC7D0C,EAASH,WAAWD,OAAOpC,IAC3BwC,EAASF,WAAW,GACpB9C,EAAagD,EAASlD,eACtBa,GAAiB,GACjBE,GAAoB,EAAK,EAsB6BU,UAAWX,EAAmB,QAAU,WAAWc,SAAC,qBAE9FJ,EAAAA,EAAAA,MAAA,UAAQE,MAAO,CAAEI,WAAY,OAASK,MAAO7B,EAAM8B,SAAWC,GAAM9B,EAAQ8B,EAAEC,OAAOH,OAAOP,SAAA,EACxFC,EAAAA,EAAAA,KAAA,UAAQM,MAAM,KAAIP,SAAC,kBACnBC,EAAAA,EAAAA,KAAA,UAAQM,MAAM,KAAIP,SAAC,qBAEvBC,EAAAA,EAAAA,KAAA,UAAQM,MAAO3B,EAAM4B,SAAWC,GAAM5B,EAAQ4B,EAAEC,OAAOH,OAAOP,SACzD,IAAIyB,MAAM,KAAKC,KAAI,CAACC,EAAGC,KACpB3B,EAAAA,EAAAA,KAAA,UAAoBM,MAAOqB,EAAI,EAAE5B,SAAE6B,OAAOD,EAAI,GAAGE,SAAS,EAAG,MAAhDF,EAAI,OAEhB,UAET3B,EAAAA,EAAAA,KAAA,UAAQM,MAAOzB,EAAQ0B,SAAWC,GAAM1B,EAAU0B,EAAEC,OAAOH,OAAOP,SAC7D,IAAIyB,MAAM,KAAKC,KAAI,CAACC,EAAGC,KACpB3B,EAAAA,EAAAA,KAAA,UAAgBM,MAAOqB,EAAE5B,SAAE6B,OAAOD,GAAGE,SAAS,EAAG,MAApCF,OAEZ,gBAIjB3B,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAQJ,UAAU,OAAOiB,QA3GlBiB,UACX,IACI,MAAMC,QAAiBC,MAAM,8BAA+B,CACxDC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBpE,KAAMqE,KAAKC,UAAU,CACjBzE,QACAG,OACAQ,WACA+D,QAAS,EACTC,WAAY,EACZtE,YACAI,YACAV,WACAa,cAGFgE,QAAaR,EAASS,OAC5BC,MAAM,+CAENtD,EAAS,UACTuD,QAAQC,IAAI,WAAYJ,EAE5B,CAAE,MAAOK,GACLF,QAAQE,MAAM,SAAUA,EAE5B,GA+E6C7C,SAAC,kBAC1CC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACHC,aAAa,4BACbC,aAAa,WACbC,OAAO,QACPC,gBAAgB,UAChBC,oBAAoB,EACpBC,gBAAgB,EAChBC,QAAS,CAACC,KACVC,SAAS,QACT/C,SAAUxC,EACVwF,MAAO,CACHC,iBAxFM1B,MAAO2B,EAAMC,KAC/BhB,QAAQC,IAAIc,EAAK,OA0FX,EC7Hd,EA3BcE,KACZ,MAAOjG,EAAUkG,IAAe/F,EAAAA,EAAAA,UAAS,UAClCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAG1BgG,EAAwBzD,IAC7BwD,EAAYxD,EAAK,EAGnB,OACET,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EAEEJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAQJ,UAAwB,UAAblC,EAAuB,iBAAmB,QAASmD,QAASA,IAAMgD,EAAqB,SAAS9D,SAAC,WACpHC,EAAAA,EAAAA,KAAA,UAAQJ,UAAwB,YAAblC,EAAyB,mBAAqB,UAAWmD,QAASA,IAAMgD,EAAqB,WAAW9D,SAAC,gBAE9HC,EAAAA,EAAAA,KAAA,UAGEA,EAAAA,EAAAA,KAAC8D,EAAS,CAAChG,KAAMA,EAAMC,QAASA,EAASL,SAAUA,MAIjD,C","sources":["components/main/EditorBox.js","views/Upload.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Editor } from '@toast-ui/react-editor';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport colorSyntax from '@toast-ui/editor-plugin-color-syntax';\nimport 'tui-color-picker/dist/tui-color-picker.css';\nimport '@toast-ui/editor-plugin-color-syntax/dist/toastui-editor-plugin-color-syntax.css';\nimport '@toast-ui/editor/dist/i18n/ko-kr';\nimport '../../assets/scss/layout/_upload.scss';\n\nconst EditorBox = ({ postType }) => {\n    const [title, setTitle] = useState('');\n    const [body, setBody] = useState('');\n    const [createdAt, setCreatedAt] = useState(new Date().toISOString()); // 현재 시간으로 초기화\n    const [expiredAt, setExpiredAt] = useState(''); // 만료 시간\n    const [memberId] = useState('id_222');\n    const [address, setAddress] = useState('');\n    const [amPm, setAmPm] = useState('AM'); // 오후/오전\n    const [hour, setHour] = useState('12'); // 시간\n    const [minute, setMinute] = useState('00'); // 분\n    const [todaySelected, setTodaySelected] = useState(false);\n    const [tomorrowSelected, setTomorrowSelected] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // 컴포넌트가 처음 마운트될 때 한 번 실행\n        const interval = setInterval(() => {\n            // 매 초마다 현재 시간을 업데이트\n            setCreatedAt(new Date().toISOString());\n        }, 1000);\n\n        // 컴포넌트가 언마운트될 때 clearInterval을 호출하여 메모리 누수를 방지\n        return () => clearInterval(interval);\n    }, []); // 빈 배열을 전달하여 컴포넌트가 처음 마운트될 때만 실행\n\n    const onSave = async () => {\n        try {\n            const response = await fetch(`http://localhost:3001/post/`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \n                    title,\n                    body,\n                    memberId,\n                    likeNum: 0,\n                    commentNum: 0,\n                    createdAt,\n                    expiredAt,\n                    postType,\n                    address,\n                }),\n            });\n            const data = await response.json();\n            alert('저장되었습니다.');\n            // 페이지 이동\n            navigate('/mymap');\n            console.log('Success:', data);\n            // Optionally, show a success message or redirect the user\n        } catch (error) {\n            console.error('Error:', error);\n            // Optionally, show an error message to the user\n        }\n    };\n\n    const onUploadImage = async (blob, callback) => {\n        console.log(blob);\n        // Handle image upload logic\n    };\n\n    const onChangeTitle = (e) => {\n        setTitle(e.target.value);\n    };\n\n    const onChangeAddress = (e) => {\n        setAddress(e.target.value);\n    };\n\n    const formattedTime = new Date(createdAt).toLocaleString('ko-KR');\n\n    const handleTodayClick = () => {\n        const today = new Date();\n        today.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n        today.setMinutes(Number(minute));\n        today.setSeconds(0);\n        setExpiredAt(today.toISOString());\n        setTodaySelected(true);\n        setTomorrowSelected(false);\n    };\n    \n    const handleTomorrowClick = () => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        tomorrow.setHours(amPm === 'PM' ? Number(hour) + 12 : Number(hour));\n        tomorrow.setMinutes(Number(minute));\n        tomorrow.setSeconds(0);\n        setExpiredAt(tomorrow.toISOString());\n        setTodaySelected(false);\n        setTomorrowSelected(true);\n    };\n    \n\n    return (\n        <div className=\"edit_wrap\" style={{ position: \"relative\" }}>\n            <div>\n                <h2>\n                    제목: \n                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"제목을 입력하세요.\" value={title} onChange={onChangeTitle} />\n                </h2>\n                <span style={{ marginLeft: \"25px\" }}>\n                    주소: \n                    <input style={{ marginLeft: \"10px\", border: \"none\", width: \"400px\" }} type=\"text\" placeholder=\"주소를 입력하세요.\" value={address} onChange={onChangeAddress} />\n                </span>\n                <div style={{ marginTop: \"5px\" }}>\n                    현재 시간: {formattedTime}\n                </div>\n                <div style={{ marginTop: \"5px\", position: \"relative\" }}>\n                    만료 시간:\n                    <div style={{ display: \"inline-block\", marginRight: \"5px\" }}>\n                        <button onClick={handleTodayClick} className={todaySelected ? \"today\" : \"tomorrow\"}>오늘</button>\n                        <button onClick={handleTomorrowClick} className={tomorrowSelected ? \"today\" : \"tomorrow\"}>내일</button>\n                    </div>\n                    <select style={{ marginLeft: \"5px\" }} value={amPm} onChange={(e) => setAmPm(e.target.value)}>\n                        <option value=\"AM\">오전</option>\n                        <option value=\"PM\">오후</option>\n                    </select>\n                    <select value={hour} onChange={(e) => setHour(e.target.value)}>\n                        {[...Array(12)].map((_, i) => (\n                            <option key={i + 1} value={i + 1}>{String(i + 1).padStart(2, '0')}</option>\n                        ))}\n                    </select>\n                    시\n                    <select value={minute} onChange={(e) => setMinute(e.target.value)}>\n                        {[...Array(60)].map((_, i) => (\n                            <option key={i} value={i}>{String(i).padStart(2, '0')}</option>\n                        ))}\n                    </select>\n                    분\n                </div>\n            </div>\n            <br />\n            <button className='save' onClick={onSave}>저장</button>\n            <Editor\n                initialValue=\"hello react editor world!\"\n                previewStyle=\"vertical\"\n                height=\"600px\"\n                initialEditType=\"wysiwyg\"\n                useCommandShortcut={false}\n                hideModeSwitch={true} //하단 타입 선택탭 숨기기\n                plugins={[colorSyntax]}\n                language=\"ko-KR\"\n                onChange={setBody} // onChange event directly sets the body state\n                hooks={{\n                    addImageBlobHook: onUploadImage\n                }}\n            />\n        </div>\n    );\n};\n\nexport default EditorBox;\n","import React, { useState } from 'react';\nimport EditorBox from '../components/main/EditorBox';\n// import ChangeAddress from '../components/main/ChangeAddress';\nimport \"../assets/scss/layout/_upload.scss\";\n\nconst Upload= () => {\n  const [postType, setPostType] = useState('daily'); // 포스트 타입 state\n  const [body, setBody] = useState(''); // 에디터 내용을 담는 state\n\n   // 포스트 타입이 변경될 때 호출되는 함수\n   const handlePostTypeChange = (type) => {\n    setPostType(type);\n  };\n\n  return (\n    <div>\n      {/* 포스트 타입 선택 버튼 */}\n      <div>\n        <button className={postType === 'daily' ? 'daily selected' : 'daily'} onClick={() => handlePostTypeChange('daily')}>Daily</button>\n        <button className={postType === 'history' ? 'history selected' : 'history'} onClick={() => handlePostTypeChange('history')}>History</button>\n      </div>\n      <br />\n      {/* 선택된 포스트 타입에 따라 다른 에디터 박스를 렌더링 */}\n      {postType === 'daily' ? (\n        <EditorBox body={body} setBody={setBody} postType={postType} />\n      ) : (\n        <EditorBox body={body} setBody={setBody} postType={postType}/>\n      )}\n    </div>\n  );\n};\n\nexport default Upload;\n"],"names":["_ref","postType","title","setTitle","useState","body","setBody","createdAt","setCreatedAt","Date","toISOString","expiredAt","setExpiredAt","memberId","address","setAddress","amPm","setAmPm","hour","setHour","minute","setMinute","todaySelected","setTodaySelected","tomorrowSelected","setTomorrowSelected","navigate","useNavigate","useEffect","interval","setInterval","clearInterval","formattedTime","toLocaleString","_jsxs","className","style","position","children","_jsx","marginLeft","border","width","type","placeholder","value","onChange","e","target","marginTop","display","marginRight","onClick","handleTodayClick","today","setHours","Number","setMinutes","setSeconds","handleTomorrowClick","tomorrow","setDate","getDate","Array","map","_","i","String","padStart","async","response","fetch","method","headers","JSON","stringify","likeNum","commentNum","data","json","alert","console","log","error","Editor","initialValue","previewStyle","height","initialEditType","useCommandShortcut","hideModeSwitch","plugins","colorSyntax","language","hooks","addImageBlobHook","blob","callback","Upload","setPostType","handlePostTypeChange","EditorBox"],"sourceRoot":""}